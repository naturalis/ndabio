<?php
// TODO: alle includes bij elkaar zetten

/**
* DEFINE BLOCKS
*/
include("ndabioresults.block.inc");

/**
 * Implements hook_menu().
 */
function ndabioresults_menu() {
  global $language;

  $items['admin/config/naturalis/ndaresult'] = array(
    'title' => 'NDA result config',
    'description' => 'Configuration for Naturalis module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ndabioresults_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['nba/result/%'] = array(
    'page callback' => 'ndabioresults_pass',
    //'page arguments' => array(1), //0 = nda, 1 = pass, 2 = *.
    'load arguments' => array('%map', '%index'),
    'access callback' => TRUE,
  );
  $items['nba/result'] = array(
    'page callback' => 'ndabioresults_pass',
    //'page arguments' => array(1), //0 = nda, 1 = pass, 2 = *.
    'load arguments' => array('%map', '%index'),
    'access callback' => TRUE,
  );
  $items['nba/back'] = array(
    'page callback' => 'ndabioresults_back',
    'load arguments' => array('%map', '%index'),
    'access callback' => TRUE,
  );

  $items['nba/ajax'] = array(
   'page callback' => 'ndabioresults_ajax_callback',
   'access arguments' => array('access content'),
   'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements template_preprocess_html().
 *
 * Add an extra class to the body to trigger CSS styles
 *
 */
function ndabioresults_preprocess_html(&$vars){
    if (isset($_SESSION['ndaRequestType']) && $_SESSION['ndaRequestType'] !== 'form'){
        $vars['classes_array'][] = "nba-result-detail";
    }
    if (isset($_SESSION['ndaSearch']['pageTitle']) && current_path() == 'nba/result') {
        $vars['head_title'] = $_SESSION['ndaSearch']['pageTitle'] . ' | BioPortal';
    }
}



include 'ndabioresults.config.inc';




/**
 * Mapping function: distributes parameters to appropriate specimen service
 *
 * Distributes specimens search parameters between specimen and specimen name
 * services. Important: list of parameters should be complete!
 *
 * @param array $sP Search parameters
 * @param string $type Service type
 *
 * @return array Reduced array of search criteria for the service of choice
 */
function setSpecimenParameters (array $sP, $type) {
    $parameters = array(
        specimenService() => array(
            'collectingStartDate',
            'collectionFieldNumber',
            'gatheringAgent',
            'localityText',
            'phaseOrStage',
            'unitID',
            'sex',
            'taxonomicStatus',
            'typeStatus',
            '_geoShape'
        ),
        specimenNamesService() => array(
            'className',
            'family',
            'genusOrMonomial',
            'kingdom',
            'order',
            'phylum',
            'specificEpithet',
            'infraspecificEpithet',
            'vernacularName',
            '_geoShape',
            '_showMap'
        )
    );
    foreach ($parameters[$type] as $p) {
        if (isset($sP[$p]) && (!empty($sP[$p]) || is_numeric($sP[$p]))) {
            $d[$p] = $sP[$p];
        }
    }
    // If any parameters are found, append andOr and geoShape (if applicable)
    if (isset($d)) {
        $d['_andOr'] = $sP['_andOr'];
        if (!empty($sP['geoShape'])) {
            $d['_geoShape'] = $sP['geoShape'];
        }
    }
    return isset($d) ? $d : null;
}

/**
 * Accepts search form data and returns formatted result
 *
 * The main function that actually processes the incoming POST data, stores the
 * POST data in a SESSION, distributes the search to the appropriate channels
 * and returns the formatted output.
 *
 * Headers were added to avoid problems with "Webpage has expired" in IE after
 * hitting back button
 *
 * @return string The formatted output
*/
function ndabioresults_pass ($args = "") {
    global $base_path;

    drupal_add_http_header('Expires', 'Sat, 01 Jan 2000 00:00:00 GMT');
    drupal_add_http_header('Last-Modified', gmdate("D, d M Y H:i:s") . ' GMT');
    drupal_add_http_header('Cache-Control', 'post-check=0, pre-check=0');
    session_cache_limiter("must-revalidate");

    unset($_SESSION['ndaSearch']['pageTitle']);

    drupal_add_js("var str_base_path = '$base_path' ", 'inline');
    // Thematic search
    if (isset($_GET['theme']) && !empty($_GET['theme'])) {
        unset($_SESSION['ndaSearch']);
        $_SESSION['ndaSearch']['theme'] = $_GET['theme'];
        return ndaThematicSearch();
    }

    // Back link clicked; proceed as if POST data was received but retrieve this from SESSION
    if (isset($_GET['back']) && isset($_SESSION['ndaSearch']) && !empty($_SESSION['ndaSearch'])) {
        drupal_set_title(t("Search results"));

        if (!empty($_SESSION['ndaSearch']['term'])) {
            return ndaSimpleSearch();
        } else if (!empty($_SESSION['ndaSearch']['theme'])) {
            return ndaThematicSearch();
        } else {
            return ndaAdvancedSearch();
        }
    }

    // POST data from the search form?
    // If so, add to SESSION or replace existing SESSION data
    if (isset($_POST['form_id']) && $_POST['form_id'] == 'ndabio_advanced_taxonomysearch') {
        drupal_set_title(t("Search results"));

        $_SESSION['ndaSearch'] = $_POST;
        logSearch();
        return empty($_SESSION['ndaSearch']['term']) ? ndaAdvancedSearch() : ndaSimpleSearch();
    }

    // GET data from within NDA response?
    // Forward directly to appropriate service
    else if (isset($_GET['nba_request'])) {
        // @todo: check direct url for injection?
        return ndaDirectRequest(urldecode($_GET['nba_request']));
     }

    // If both POST and SESSION are empty we have a problem...
    else {
        // Probably best to redirect gracefully to search page?
        handleError('No POST data received! Form validation should trap this.
            Redirect to home if this occurs?');
        drupal_goto('');
    }
}

/**
 * Logs searches to Drupal
 *
 * Agregates data from search form (as SESSION data) and stores search and
 * user data in Drupal database (search_log content type)
 */
function logSearch () {
    foreach ($_SESSION['ndaSearch'] as $k => $v) {
        $skip = array(
            'op', 'form_build_id', 'form_token', 'form_id'

        );
        if (in_array(strtolower($k), $skip) ||
            $k == 'geoShape' && !empty($_SESSION['ndaSearch']['gid'])) {
            continue;
        }
        $data['field_' . strtolower($k)] = $v;
    }
    $data['field_timestamp'] = date('Y-m-d H:i:s');
    $data['field_ip_address'] = $_SERVER['REMOTE_ADDR'];
    $data['field_user_agent'] = $_SERVER['HTTP_USER_AGENT'];
    $data['field_search_type'] = !empty($_SESSION['ndaSearch']['geoShape']) ? 'geo ' :
        (empty($data['field_term']) ? 'advanced' : 'simple');
    $file = variable_get('ndabioresults_config_log', NBALOG); // "/tmp/bioportal.log.json";
    file_put_contents($file, json_encode($data) . "\r\n", FILE_APPEND);

    $node = new stdClass();
    $node->title = $data['field_search_type'] . ' | '. $data['field_ip_address'] .
            ' | ' . $data['field_timestamp'];
    $node->type = "search_log";
    node_object_prepare($node);

    $node->language = LANGUAGE_NONE; // Or 'en' if locale is enabled
    $node->uid = $user->uid;
    $node->status = 0; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled
    foreach ($data as $k => $v) {
        if ($v != '') {
            $node->{$k}[$node->language][0]['value'] = $v;
        }
    }
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
}

/**
 * Mapping function: distributes parameters to appropriate specimen service
 *
 * Distributes specimens search parameters between specimen and specimen name
 * services. Important: list of parameters hould be complete!
 *
 * @param array $sP Search parameters
 * @param string $type Service type
 * @return array Reduced array of search criteria for the service of choice
 */
function ndabioresults_ajax_callback () {
    if (isset($_GET['nba_request'])) {
        // For the time being this service is used only to retrieve totalSize
        // Therefore maxResults is capped to 1 by default
        if (isset($_GET['getTotal'])) {
            $remoteData = ndaAjaxRequest(urldecode($_GET['nba_request']));
            $data = json_decode((reset($remoteData)));
            echo $data->totalSize;
            die();
        }
        $remoteData = ndaAjaxRequest(urldecode($_GET['nba_request']));
        die(reset($remoteData));
    }
    die('Invalid NBA request');
}


/**
 * Distributes search parameter of the simple search to appropiate services and returns
 * formatted output
 *
 * Retrieves search parameters from SESSION set by ndabioresults_pass, set to
 * the appropriate channels and returns formatted result
 *
 * @return string Formatted output
 */
function ndaSimpleSearch () {
    $pageHeader = ""; //_wrap(t('Search results'),"H1");

    $p['_search'] = $_SESSION['ndaSearch']['term'];

    // Taxon search does not include geoShape and should not be invoked when coming from geo form
    // when a search are has been entered
    if (!isset($_SESSION['ndaSearch']['gid']) || empty($_SESSION['ndaSearch']['gid']) &&
        empty($_SESSION['ndaSearch']['geoShape'])) {
        $services[taxonService()] = $p;
    }

    // Other searches do include geoShape if entered
    if (isset($_SESSION['ndaSearch']['geoShape']) && !empty($_SESSION['ndaSearch']['geoShape'])) {
        $p['_geoShape'] = $_SESSION['ndaSearch']['geoShape'];

        $area =  (!empty($_SESSION['ndaSearch']['location']) ? $_SESSION['ndaSearch']['location'] :
            t('area drawn on map'));

        $pageHeader =
            _wrap(
                _wrap(
                    t("Showing only results in")
                   . " "
                   . _wrap($area, "span", "term"),
                   "h1"
                ), "div", "panel"
            );
    };

    $services[specimenNamesService()] = $p;
    $services[multimediaService()] = $p;
    $services[specimenService()] = $p;

    // Set session with NBA query type;
    // used to determine if show all should be printed
    unset($_SESSION['ndaFilters']);
    $_SESSION['ndaRequestType'] = 'form';
    $_SESSION['ndaPageDetail'] = 'result from simple form';

    $pageBody = performNdaRequest(setChannels($services));

    return $pageHeader . (!empty($pageBody) ? $pageBody : '<p>' . printNoResults() . '</p>');
}

/**
 * Distributes search parameters of the advanced search to appropiate services and returns
 * formatted output
 *
 * Retrieves search parameters from SESSION set by ndabioresults_pass, set to
 * the appropriate channels and returns formatted result
 *
 * @return string Formatted output
 */
function ndaAdvancedSearch () {

    $pageHeader = ""; //_wrap(t('Search results'),"H1");

    unset($_SESSION['ndaFilters']);
    $services[multimediaService()] = setSectionParameters($_SESSION['ndaSearch'], 'm_');
    $services[taxonService()] = setSectionParameters($_SESSION['ndaSearch'], 't_');
    $services[specimenService()] = setSectionParameters($_SESSION['ndaSearch'], 's_');
    $services[specimenNamesService()] = setSectionParameters($_SESSION['ndaSearch'], 'n_');

    // Special case for specimen/search: unset this service if only geoShape is present;
    // results of specimen/name-search and specimen/search will then be identical
    if (!serviceUsed($services[specimenService()])) {
        unset($services[specimenService()]);
    }

    // Another check: specimen/search is used but specimen/name-search is not
    if (isset($services[specimenService()]) && !serviceUsed($services[specimenNamesService()])) {
        unset($services[specimenNamesService()]);
    }

    // Now check if either multimedia or specimen has search parameters
    // If so, unset the "empty" service; if not, pass both
    if (!serviceUsed($services[specimenNamesService()]) && serviceUsed($services[multimediaService()])) {
        unset($services[specimenNamesService()]);
    } else if (serviceUsed($services[specimenNamesService()]) && !serviceUsed($services[multimediaService()])) {
        unset($services[multimediaService()]);
    }

    if (isset($_SESSION['ndaSearch']['geoShape']) && !empty($_SESSION['ndaSearch']['geoShape'])) {
        $area =  (!empty($_SESSION['ndaSearch']['location']) ?
            $_SESSION['ndaSearch']['location'] : t('area drawn on map'));

        $pageHeader =
            _wrap(
                _wrap(
                    t("Showing only results in")
                   . " "
                   . _wrap($area, "span", "term"),
                   "h1"
            ), "div", "panel"
        );
    }

    // Test if anything has been posted; if not return with error message
    if (!dataPosted($services)) {
        return $pageHeader. _wrap(t('Oops, something went wrong') . '. ' .
            "<a href='" . setStartUrl() . "'>" . t('Back to home page') . '</a>.', 'p');
    }

    // Set session with NBA query type;
    // used to determine if show all should be printed
    $_SESSION['ndaRequestType'] = 'form';
    $_SESSION['ndaPageDetail'] = 'result from advanced form';

    $pageBody = performNdaRequest(setChannels($services));

    return $pageHeader . (!empty($pageBody) ? $pageBody : '<p>' . printNoResults() . '</p>');
}

/**
 * Sets url to search form
 *
 * Used to create links back to search form; differentiates between home and
 * geographic search page
 *
 * @return string Url to last used form
 */
function setStartUrl () {
    if (isset($_SESSION['ndaSearch']['geoShape'])) {
        return setBasePath() . "geographic-search/";
    }
    return setBasePath();
}

/**
 * Sets base url
 *
 * Sometimes Drupal home is not accessible at the site root; this function returns the
 * base of of the Drupal installation
 *
 * @return string Url to Drupal root
 */
function setBasePath () {
    global $base_root, $base_path;
    return $base_root . $base_path;
}

/**
 * Checks if any search parameters have been set for a service
 *
 * @param string $service Service
 * @return boolean
 */
function serviceUsed ($service) {
    if (count($service) == 2 && isset($service['_geoShape']) && isset($service['_andOr'])) {
        return false;
    }
    return true;
}

/**
 * Performs thematic search
 *
 * For thematic search, two services are called: multimedia and specimen.
 * Currenty this service simply returns the search results. However, it is
 * already more or less ready to be used as an additional filter to the search form
 *
 * @return string Formatted result page
 */
function ndaThematicSearch () {

    unset($_SESSION['ndaFilters']);
    $services[multimediaService()] = setSectionParameters($_SESSION['ndaSearch'], 'm_');
    $services[specimenService()] = setSectionParameters($_SESSION['ndaSearch'], 's_');

    $services[multimediaService()]['theme'] = $_SESSION['ndaSearch']['theme'];
    $services[specimenService()]['theme'] = $_SESSION['ndaSearch']['theme'];

    $pageHeader = '';

    // Test if anything has been posted; if not return with error message
    if (!dataPosted($services)) {
        return $pageHeader. _wrap(t('Oops, something went wrong') . '. ' .
            "<a href='" . setStartUrl() . "'>" . t('Back to home page') . '</a>.', 'p');
    }

    // Set session with NBA query type;
    // used to determine if show all should be printed
    $_SESSION['ndaRequestType'] = 'form';
    $_SESSION['ndaPageDetail'] = 'result from thematic search';

    $pageBody = performNdaRequest(setChannels($services));

    return $pageHeader . (!empty($pageBody) ? $pageBody : '<p>' . printNoResults() . '</p>');
}

/**
 * Performs direct request
 *
 * Takes request from url as input, redirects this to the appropriate
 * service and returns formatted html.
 *
 * @param string $r Request url
 * @return string|void (empty array) Formatted output
 */
function ndaDirectRequest ($r) {
    foreach (serviceToFunctions() as $service => $d) {
        if (strpos($r, $service) !== false) {
            $url = parse_url($r);
            //parse_str($url['query'], $q);
            safe_parse_str($url['query'], $q);

            // Cap maxResults to max
            if (!isset($q['_maxResults']) || $q['_maxResults'] > maxResults()) {
                $q['_maxResults'] = isGroupService($service) ? maxGroupResults() : maxResults();
            }

            // Special case for specimens on map: remove _sort and _offset
            if (isset($q['_showMap'])) {
                unset($q['_sort'], $q['_offset']);
            }

            // Set geoShape from SESSION if geoShape is part of the request
            if (isset($q['_geoShape']) && $q['_geoShape'] == '[session]' &&
                isset($_SESSION['ndaStoredGeoShape'])) {
                $q['_geoShape'] = $_SESSION['ndaStoredGeoShape'];
            }

            $channels[0]['request'] = $service;
    		$channels[0]['url'] = ndaBaseUrl() . $service;
    		$channels[0]['method'] = $d['method'];
    		// If ES request parameter contains dots, these should be replaced with @ and reverted to
    		// dots at this point
    		$channels[0]['postfields'] = http_build_query($q);
    		// Set session variable with last used service;
            // used to determine current detail page
            $_SESSION['ndaCurrentService'] = $service;
            // Set session with NBA query type;
            // used to determine if show all should be printed
            $_SESSION['ndaRequestType'] = 'url';
            // Set session with info about current page;
            // used to set appropriate blocks
            $_SESSION['ndaPageDetail'] = $d['info'];

            return performNdaRequest($channels);
        }
    }
    return array();
}

/**
 * Dedicated service to use for Ajax request
 *
 * Takes request url, redirects to the appropriate service and returns
 * unformatted NBA json
 *
 * @param string $r Request url
 * @param string $maxResults Optional max results
 * @return json|void
 */
function ndaAjaxRequest ($r, $maxResults = false) {
    foreach (serviceToFunctions() as $service => $d) {
        if (strpos($r, $service) !== false) {
            $url = parse_url($r);
            safe_parse_str($url['query'], $q);

            if ($maxResults && is_int($maxResults) && $maxResults <= maxResults()) {
                $q['_maxResults'] = $maxResults;
            }

            $channels[0]['request'] = $service;
    		$channels[0]['url'] = ndaBaseUrl() . $service;
    		$channels[0]['method'] = $d['method'];
    		$channels[0]['postfields'] = str_replace('%40', '.', http_build_query($q));
            return queryNda($channels);
        }
    }
    return null;
}

/**
 * Checks if data has been posted
 *
 * Takes the $services array from form submission and checks if any field contains data
 *
 * @param array $services
 * @return boolean
 */
function dataPosted ($services) {
    foreach ($services as $data) {
        if (!empty($data)) {
            return true;
        }
    }
    return false;
}


/**
 * Sets curl channels
 *
 * Sets request and url parameters for curl channels
 *
 * @param array Service array (service name => search parameters)
 * @return array|void Channels for curl
 */
function setChannels (array $services) {
    $i = 0;
    $serviceSettings = serviceToFunctions();
	foreach ($services as $s => $p) {
	    if (!empty($p)) {
	        $p = array_filter($p, 'strlen');

	        // Append default search parameters for form
	        $p['_maxResults'] = maxResultsInitial();
	        $p['_sort'] = defaultSort();
	        $p['_sortDirection'] = defaultSortDirection();

	        if (isGroupService($s)) {
    	        $p['_groupMaxResults'] = maxGroupResults();
    	        $p['_groupSort'] = defaultGroupSort();
    	        $p['_groupSortDirection'] = defaultGroupSortDirection();
    	        unset($p['_sort'], $p['_sortDirection']);
	        }

	        $channels[$i]['request'] = $s;
    		$channels[$i]['url'] = ndaBaseUrl() . $s;
    		$channels[$i]['method'] = $serviceSettings[$s]['method'];
    		$channels[$i]['postfields'] =  http_build_query($p);
    		$i++;
	    }
	}
	return isset($channels) ? $channels : array();
}

/**
 * Filters input parameters from advanced search
 *
 * Input parameters in advanced search form are prefixed with s_, t_, or m_
 * to differentiate between specimen, taxon and multimedia searches. This function
 * creates a new array of input parameters, filtering empty values and stripping
 * the prefix from the input.
 *
 * @param array $post The input as key => value pairs
 * @param string $typeId The input prefix (s_, t_, m_)
 *
 * @return array|void Filtered key => value pairs
 */
function setSectionParameters (array $post, $typeId = '') {
    if ($typeId == '') {
        return $post;
    }
    $d = array();
    foreach ($post as $k => $v) {
        if (strpos($k, $typeId) === 0 && (!empty($v) || is_numeric($v))) {
            $d[str_replace($typeId, '', $k)] = $v;
        }
    }
    // Append geoShape if entered
    if (isset($post['geoShape']) && !empty($post['geoShape']) &&
        in_array($typeId, array('m_', 's_', 'n_'))) {
        $d['_geoShape'] = $post['geoShape'];
    }
    if (countSearchParameters($d) >= 1) {
        // Reset andOr parameter to _andOr and values to and/or
        $d['_andOr'] = $d['andOr'] == 0 ? 'AND' : 'OR';
        unset($d['andOr']);
        return $d;
    }
    // If only andOr flag is set, nothing has been entered;
    // return empty array
    return array();
}

/**
 * Calculates the number of search parameters excluding flags (andOr etc)
 *
 * @param array $d Search parameter
 * @return int Number of search items
 */
function countSearchParameters ($d) {
    foreach ($d as $k => $v) {
        if (in_array($k, searchFlags())) {
            unset($d[$k]);
        }
    }
    return count($d);
}


/**
 * Performs curl requests and formats results
 *
 * Performs curl queries through multicurl. For each channel, resulting json is
 * parsed to an array by one function and subsequently printed by another.
 *
 * @param array $channels Service channels
 * @return string|void
 */
function performNdaRequest (array $channels = array()) {
	if (empty($channels)) {
		handleError('Cannot set curl channels');
	}
	// Get json response(s) with curl
	$remoteData = queryNda($channels);
	// Reorder responses in print order if more than one response
	if (count($remoteData) > 1) {
	   $remoteData = sortArrayByArray($remoteData, resultOrder());
	}
	// Map functions to each channel result:
	// parses and prints data
	$output = '';
	$serviceToFunctions = serviceToFunctions();
	foreach ($remoteData as $service => $json) {
		if (!isset($serviceToFunctions[$service]) || empty($json)) {
			continue;
		}
		$parseFunction = isset($serviceToFunctions[$service]['parse']) ?
		    $serviceToFunctions[$service]['parse'] : false;
		$printFunction = isset($serviceToFunctions[$service]['print']) ?
		    $serviceToFunctions[$service]['print'] : false;
		if (!empty($parseFunction) && !empty($printFunction)) {
		    $output .= $printFunction($parseFunction($json));
		}
	}

    // Debug: print queries
    //p($channels);

	return $output;
}

/**
 * Performs multicurl queries
 *
 * Core function for multicurl requests
 *
 * @param unknown $channels Service channels
 * @param integer $timeout Optional timeout
 *
 * @return array Results as key => value pairs for each channel
 */
function queryNda ($channels = array(), $timeout = false) {
    $mh = curl_multi_init();
    for ($i = 0; $i < count($channels); $i++) {
        $ch[$i] = curl_init();

        if ($channels[$i]['method'] == 'post') {
            curl_setopt($ch[$i], CURLOPT_URL, $channels[$i]['url']);
            curl_setopt($ch[$i], CURLOPT_POST, true);
			curl_setopt($ch[$i], CURLOPT_HTTPHEADER, array('Expect:'));
            curl_setopt($ch[$i], CURLOPT_POSTFIELDS, $channels[$i]['postfields']);
        } else if ($channels[$i]['method'] == 'get') {
            $channels[$i]['url'] .= '/?'  . $channels[$i]['postfields'];
            curl_setopt($ch[$i], CURLOPT_URL, $channels[$i]['url']);
        }

        curl_setopt($ch[$i], CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch[$i], CURLOPT_HEADER, false);
        if ($timeout) {
       		curl_setopt($ch[$i], CURLOPT_TIMEOUT, $timeout);
        }
        curl_multi_add_handle($mh, $ch[$i]);
    }
    // While we're still active, execute curl
	do {
		$mrc = curl_multi_exec($mh, $active);
	} while ($mrc == CURLM_CALL_MULTI_PERFORM);

    while ($active && $mrc == CURLM_OK) {
        // Wait for activity on any curl-connection
        if (curl_multi_select($mh) == -1) {
            usleep(1);
        }
        // Continue to exec until curl is ready to
        // give us more data
        do {
            $mrc = curl_multi_exec($mh, $active);
        } while ($mrc == CURLM_CALL_MULTI_PERFORM);
    }
    // Place results in results array and close handlers
    for ($i = 0; $i < count($channels); $i++) {
        $remoteData[$channels[$i]['request']] = curl_multi_getcontent($ch[$i]);
        curl_multi_remove_handle($mh, $ch[$i]);
    }
    curl_multi_close($mh);
    return $remoteData;
}

/**
 * Parses specimen media detail json to PHP array
 *
 * @param string $json NBA response
 * @return array $output
 */
function parseSpecimenMediaDetail ($json) {
	if (!$json || !validJson($json)) {
		handleError('parseSpecimenMediaDetail: no or invalid json response');
	}
	$data = json_decode($json);
//p($data);
	$row = $data->searchResults[0];

	$output['source'] = $row->result->associatedSpecimen->sourceSystem->name;
	$output['navigation'] = getNavigation($data);
	$output['names'] = getSpecimensMultimediaNames($row);
	$output['unitID'] = setUnitId($row->result->associatedSpecimen->unitID);
	$output['title'] = $row->result->title;
	$output['description'] = $row->result->description;
	$output['creator'] = $row->result->creator;
	$output['copyrightText'] = $row->result->copyrightText;
	$output['phasesOrStages'] = $row->result->phasesOrStages;
	$output['sexes'] = $row->result->sexes;
	$output['caption'] = $row->result->caption;
	$output['imgSrc'] = getImageUrl($row);
	$output['license'] = $row->result->license;

	return $output;
}

/**
 * Gets scientific names for specimen media detail response
 *
 * @param array $row Search results section of NBA response
 * @return array|void Array with formatted names and their links
 */
function getSpecimensMultimediaNames ($row) {
	foreach ($row->result->associatedSpecimen->identifications as $i => $name) {
		$output[] = array(
			'name' => formatScientificName(
				$name->scientificName->fullScientificName,
				$name->scientificName
			),
			'url' => getTaxonUrl($row->links, $name->scientificName)
		);
	}
	return isset($output) ? $output : false;
}

/**
 * Returns url for a taxon associated with the specimen
 *
 * Quite a complicated way to find the appropriate url for a taxon. The entire
 * links object is passed and matched against the name components of the scientific
 * name. Only when a match is complete the link is considered matching
 *
 * @param object $links
 * @param array $scientificName
 * @return string|void Url to the name
 */
function getTaxonUrl ($links, $scientificName) {
	if (!empty($links)) {
		foreach ($links as $link) {
			if ($link->rel == '_taxon') {
			    // All parts in query should be present in $scientificName object
			    $parts = parse_url(urldecode($link->href));
                safe_parse_str($parts['query'], $q);
                $diff = array_diff($q, (array)$scientificName);
                if (empty($diff)) {
                    return $link->href;
                }
			}
		}
	}
	return false;
}

include 'printSpecimenMediaDetail.php';

/**
 * Parses taxon media detail json to PHP array
 *
 * @param string $json NBA response
 * @return array $output
 */
function parseTaxonMediaDetail ($json) {
	if (!$json || !validJson($json)) {
		handleError('parseTaxonMediaDetail: no or invalid json response');
	}
	$data = json_decode($json);
	$row = $data->searchResults[0];
	$output['source'] = $row->result->associatedTaxon->sourceSystem->name;
	$output['acceptedName'] = formatScientificName(
		$row->result->associatedTaxon->acceptedName->fullScientificName,
		$row->result->associatedTaxon->acceptedName
	);
	$output['names'] = getTaxonMultimediaNames($row);
	$output['navigation'] = getNavigation($data);
	$output['title'] = $row->result->title;
	$output['caption'] = $row->result->caption;
	$output['imgSrc'] = getImageUrl($row);
	$output['description'] = $row->result->description;
	$output['creator'] = $row->result->creator;
	$output['copyrightText'] = $row->result->copyrightText;
	$output['phasesOrStages'] = $row->result->phasesOrStages;
	$output['sexes'] = $row->result->sexes;
	$output['locality'] = $row->result->gatheringEvents[0]->localityText;
	$output['date'] = timeStampToDate($row->result->gatheringEvents[0]->dateTimeBegin);
	$output['license'] = $row->result->license;
	$output['sourceUrls'][$output['source']] = $row->result->associatedTaxon->recordURI;

	return $output;
}

/**
 * Gets scientific names for taxon media detail response
 *
 * @param array $row search results section of json response
 * @return array|void Array with formatted names and their links
 */
function getTaxonMultimediaNames ($row) {
	if (!empty($row->result->associatedTaxon->acceptedName)) {
	    $output[] = array(
    		'name' => formatScientificName(
    			$row->result->associatedTaxon->acceptedName->fullScientificName,
    			$row->result->associatedTaxon->acceptedName
    		),
    		'url' => getTaxonUrl($row->links, $row->result->associatedTaxon->acceptedName)
    	);
	}
	return isset($output) ? $output : false;
}



include 'printTaxonMediaDetail.php';


/**
 * Parses taxon detail json to PHP array
 *
 * Optional: adds fields to exclude to $skipFields array
 *
 * @todo Descriptions are hard-coded for NSR and CoL
 * @param string $json NBA response
 * @return array $output
 */
function parseTaxonDetail ($json) {
	$skipFields = array(
		'objectPublic'
		// etc
	);
	if (!$json || !validJson($json)) {
		handleError('parseTaxonDetail: no or invalid json response');
	}
	$data = json_decode($json);

	$output['acceptedName'] = formatScientificName(
		$data->searchResults[0]->result->acceptedName->fullScientificName,
		$data->searchResults[0]->result->acceptedName
	);
	$output['taxonID'] = getTaxonId($data);
	$output['nameElements'] =
	   getScientificNameElementsWithDuplicates($data->searchResults[0]->result->acceptedName);
	$output['sourceUrls'] = getSourceUrls($data);
	foreach ($data->searchResults as $row) {
		$source = $row->result->sourceSystem->name;

		if (!empty($row->result->defaultClassification)) {
			$output['classifications']['default'][$source] =
				parseClassification($row->result->defaultClassification);
		}
		if (!empty($row->result->synonyms)) {
			foreach ($row->result->synonyms as $i => $synonym) {
				$output['synonyms'][$source] = formatScientificName(
					$row->result->synonyms[$i]->fullScientificName,
					$row->result->synonyms[$i]
				);
			}
		}
		if (!empty($row->result->descriptions)) {
		    // @todo: hard coded for NSR and CoL
		    foreach ($row->result->descriptions as $i => $description) {
		        // NSR Dutch
		        if (strtolower($description->category) == 'algemeen') {
                    $output['descriptions']['Dutch'][$source] =
					   $description->description;
		        }
		        // NSR English
		        if (strtolower($description->category) == 'summary') {
                    $output['descriptions']['English'][$source] =
					   $description->description;
		        }
		        // CoL English
		        if (empty($description->category) && !empty($description->description)) {
                    $output['descriptions']['English'][$source] =
					   $description->description;
		        }
		    }
		}
		if (!empty($row->result->vernacularNames)) {
			foreach ($row->result->vernacularNames as $i => $name) {
				$output['commonNames'][$source][$name->language][] = $name->name;
			}

		}
	}
	return $output;
}

/**
 * Urls for data sources
 *
 * @param array $data NBA json response
 * @return array|void $output Array with key source name, value url
 */
function getSourceUrls ($data) {
    foreach ($data->searchResults as $row) {
        $urls[$row->result->sourceSystem->name] = $row->result->recordURI;
    }
    return isset($urls) ? $urls : null;
}

/**
 * Prints single source as formatted html
 *
 * @param array $data
 * @param string $source
 * @return string Formatted html
 */
function printSource($data, $source) {
    if (isset($data['sourceUrls'][$source])) {
        return '<a href="' . $data['sourceUrls'][$source] . '" target="_blank">' . $source . '</a>';
    }
    return $source;
}

/**
 * NSR id of a taxon
 *
 * @param array $data NBA json response
 * @return int|void ID of NRS taxon record
 */
function getTaxonId ($data) {
    foreach ($data->searchResults as $row) {
        if ($row->result->sourceSystem->code == 'NSR') {
            return $row->result->sourceSystemId;
        }
    }
    return null;
}

/**
 * Parses classification of taxon
 *
 * @param object $classification Classification section of NBA response
 * @return array|void
 */
function parseClassification ($classification) {
    if (empty($classification) || empty($type)) {
        return $classification;
    }
    if ($type == 'system') {
        foreach ($classification as $rank) {
            $c[$rank->rank] = $rank->name;
        }
    }
    return isset($c) ? $c : $classification;
}


include 'printTaxonDetail.php';

include 'printCommonNames.php';

include 'printDescriptions.php';

include 'printClassifications.php';


/**
 * Parses specimen detail json to PHP array
 *
 * Optional: adds fields to exclude to $skipFields array
 *
 * @param string $json NBA response
 * @return array $output
 */
function parseSpecimenDetail ($json) {

    $skipFields = array(
        'objectPublic',
	    'sourceSystemId',
        'sourceID',
	    'owner',
	    'title',
	    'multiMediaPublic',
	    'licenseType',
	    'license',
	    'assemblyID',
	    'collectionType'
		// etc
	);
	if (!$json || !validJson($json)) {
		handleError('parseSpecimenDetail : no or invalid json response');
	}
	$data = json_decode($json);

	foreach ($data->searchResults[0]->result as $field => $value) {
		if (!is_array($value) && !is_object($value) &&
			!in_array($field, $skipFields) && $value != '') {
			$output[$field] = setUnitId($value, $field);
		}
	}
	$output['assemblageID'] = $data->searchResults[0]->result->assemblageID;
	$output['collectionType'] = $data->searchResults[0]->result->collectionType;
	$output['source'] = isset($data->searchResults[0]->result->sourceSystem) ?
	   $data->searchResults[0]->result->sourceSystem->name : '';
	$output['names'] = getSpecimenTaxonNames($data->searchResults[0], $data->links);
	$output['vernaculars'] = getSpecimenVernaculars($data->searchResults[0]);
	$output['gatheringEvent'] = getGatheringEventSpecimens($data);
	$output['license'] = $data->searchResults[0]->result->license;
	$output['otherSpecimens'] = getOtherSpecimens($data);
	// $output['navigation'] = getNavigation($data);

	return $output;
}

/**
 * Scientific names and their urls for a specimen
 *
 * @param array $row Identification section of NBA response
 * @param array $links Links to taxa (optional: if not provided links will be extracted from NBA response)
 * @return array|void Array of names and their urls
 */
function getSpecimenTaxonNames ($row, $links = false) {
    if (!isset($row->result->identifications) || empty($row->result->identifications)) {
        return array();
    }
    if (!$links) {
        $links = $row->links;
    }
    foreach ($row->result->identifications as $i => $id) {
		$output[] = array(
			'name' => formatScientificName(
				$id->scientificName->fullScientificName,
				$id->scientificName
			),
			'url' => getTaxonUrl($links, $id->scientificName)
		);
	}
	return isset($output) ? $output : false;
}

/**
 * Vernacular names for a specimen
 *
 * @param array $row Identification section of NBA response
 * @return array|void Array of names
 */
function getSpecimenVernaculars ($row) {
    if (!isset($row->result->identifications) || empty($row->result->identifications)) {
        return array();
    }
    foreach ($row->result->identifications as $id) {
		if (!empty($id->vernacularNames)) {
		    foreach ($id->vernacularNames as $name) {
		        $output[] = $name->name;
		    }
		}
	}
	return isset($output) ? $output : false;
}

/**
 * Get previous/next links from NBA response
 *
 * @param array $data NBA response
 * @return array|void Array with previous and next links
 */
function getNavigation ($data) {
	if (isset($data->links) && !empty($data->links)) {
		foreach ($data->links as $link) {
			if ($link->rel == 'prev' || $link->rel == 'next') {
				$output[$link->rel] = $link->href;
			}
		}
	}
	return isset($output) ? $output : null;
}

/**
 * Strips base url from string
 *
 * @param string $url
 * @return string $url Stripped url
 */
function stripBaseUrl ($url) {
    return str_replace(urlencode(ndaBaseUrl()), '', $url);
}


include 'printSpecimenDetail.php';

include 'printNavigation.php';

include 'printNamesWithLinks.php';

/**
 * Gets other specimens in "specimen collection" (Brahms)
 *
 * @param array $row Other specimens in set section of NBA response
 * @return array|void Array with other specimens
 */
function getOtherSpecimens ($row) {
	if (!empty($row->searchResults[0]->result->otherSpecimensInSet)) {
		foreach ($row->searchResults[0]->result->otherSpecimensInSet as $i => $specimen) {
			$s = array();
			$s['unitID'] = setUnitId($specimen->unitID);
			$s['collectionType'] = $specimen->collectionType;
			$s['url'] = getSpecimenInCollectionUrl($row, $i);
			$c[] = $s;
		}
	}
	return isset($c) ? $c : null;
}

/**
 * Converts timestamp in milliseconds to year-month-day
 *
 * @param string $v
 * @return string
 */
function timeStampToDate ($v) {
    if (!empty($v)) {
        return date('Y-m-d', $v / 1000);
    }
    return null;
}

/**
 * Gets gathering event data for specimen
 *
 * @param array $row Gathering event section of NBA response
 * @return array|void
 */
function getGatheringEventSpecimens ($row, $i = 0) {
	if (!empty($row->searchResults[$i]->result->gatheringEvent)) {
        $event = $row->searchResults[$i]->result->gatheringEvent;
		foreach ($event as $k => $v) {
		    if (!is_array($v) && !is_object($k) && $v != '') {
		        // Translate datetime from Unix to proper date
		        if ($k == 'dateTimeBegin' || $k == 'dateTimeEnd') {
		            $v = timeStampToDate($v);
		        }
                $d[$k] = $v;
		    }
		}
		if (!empty($event->gatheringAgents)) {
		    foreach ($event->gatheringAgents as $a) {
                $agent[] = $a->fullName . (!empty($a->organization) ?
                    ' (' . $a->organization . ')' : '');
		    }
		    $d['gatheringAgents'] = $agent;
		}
		if (!empty($event->siteCoordinates)) {
		    foreach ($event->siteCoordinates as $c) {
                if ($c->longitudeDecimal != 0 && $c->latitudeDecimal != 0) {
                    $coordinates['lat'] = $c->latitudeDecimal;
                    $coordinates['lon'] = $c->longitudeDecimal;
                }
		    }
		    $d['siteCoordinates'] = isset($coordinates) ?
		        $coordinates : null;
		}
	}
	return isset($d) ? $d : null;
}

/**
 * Parses multimedia json to PHP array
 *
 * @param string $json NBA response
 * @return array $output
 */
function parseMultimedia ($json) {
	if (!$json || !validJson($json)) {
		handleError('parseMultimedia: no or invalid json response');
	}
	$data = json_decode($json);
//p($data);
	$output['searchTerms'] = getSearchTerms($data);
	$output['total'] = getTotalRows($data);
	if (!$output['searchTerms']) {
		handleError('parseMultimedia: invalid json response');
	}
	if ($output['total'] == 0) {
	    $output['results'] = array();
        return $output;
	}
	foreach ($data->searchResults as $row) {
		$type = !empty($row->result->associatedTaxon) ? 'associatedTaxon' :
            'associatedSpecimen';
		$d['title'] = $row->result->title;
		$d['format'] =
		$d['caption'] = $row->result->caption;
		$d['score'] = $row->percentage;
		$d['url'] = getMultimediaDetailLink($row);
		$d['source'] = !empty($row->result->{$type}->sourceSystem) ?
            $row->result->{$type}->sourceSystem->name : '';

		list($d['imgSrc'], $d['format']) = getImageData($row);
		$d['hits'] = getHits($row, false);
		$d['taxon'] = getMultimediaTaxon($row, $output['searchTerms']);
		$d['unitID'] = getMultimediaUnitId($row, $output['searchTerms']);
		$output['results'][] = $d;
	}

	$output['self'] = getSelfLink($data);
	$output['showAll'] = getShowAll($data);
	$output['paginator'] = getPaginator($data);

	// Only set filter when performing initial search
	if ($output['searchTerms']['_maxResults'][0] == maxResultsInitial()) {
	    $_SESSION['ndaFilters']['multimedia'] = $output['showAll'];
	}

	return isset($output) ? $output : false;
}

/**
 * Gets url to multimedia detail
 *
 * @param array $row NBA response
 * @return string Url
 */
function getMultimediaDetailLink ($row) {
    foreach ($row->links as $link) {
        if ($link->rel == '_multimedia') {
            return $link->href;
        }
    }
}


include 'printMultimedia.php';
include 'printMatches.php';

/**
 * Parses specimen data json to PHP array
 *
 * @param string $json NBA response
 * @return array $output
 */
function parseSpecimens ($json) {
	if (!$json || !validJson($json)) {
		handleError('parseSpecimens: no or invalid json response');
	}
	$data = json_decode($json);

	$output['searchTerms'] = getSearchTerms($data);
	$output['total'] = getTotalRows($data);
	if (!$output['searchTerms']) {
		handleError('parseSpecimens: invalid json response');
	}
	if ($output['total'] == 0) {
	    $output['results'] = array();
        return $output;
	}
	foreach ($data->searchResults as $row) {
		$d = array();
		$d['unitID'] = setUnitId($row->result->unitID);
		$d['url'] = $row->links[0]->href;
		$d['hits'] = getHits($row, false);
		$d['source'] = $row->result->sourceSystem->name;
		$d['score'] = $row->percentage;
		$d['names'] = getSpecimenTaxonNames($row);
		$output['results'][] = $d;
	}

	$output['self'] = getSelfLink($data);
	$output['showAll'] = getShowAll($data);
	$output['paginator'] = getPaginator($data);

	// Only set filter when performing initial search
	if ($output['searchTerms']['_maxResults'][0] == maxResultsInitial()) {
	    $_SESSION['ndaFilters']['specimen'] = $output['showAll'];
	}

	return isset($output) ? $output : false;
}

include 'printSpecimens.php';

include 'printHits.php';

include 'printSpecimenTaxa.php';

/**
 * Gets unit id associated with multimedia
 *
 * @param array $row Json data
 * @param array $searchTerms Optional parameter so search terms can be highlighted
 * @return string|void Registration number (= unit id)
 */
function getMultimediaUnitId ($row, $searchTerms = false) {
    if (isset($row->result->associatedSpecimen->unitID)) {
        $output = setUnitId($row->result->associatedSpecimen->unitID);
        return $searchTerms ? highlightSearchTerms($output, $searchTerms) : $output;
    }
    return null;
}

/**
 * Gets scientific name associated with multimedia
 *
 * @param array $row Json data
 * @param array $searchTerms Optional parameter so search terms can be highlighted
 * @return string|void Scientific name
 */
function getMultimediaTaxon ($row, $searchTerms = false) {
    if (isset($row->result->associatedTaxon->acceptedName) &&
        !empty($row->result->associatedTaxon->acceptedName)) {
        return formatScientificName(
    		$row->result->associatedTaxon->acceptedName->fullScientificName,
    		$row->result->associatedTaxon->acceptedName,
            $searchTerms
	    );
    }
    if (isset($row->result->associatedSpecimen->identifications) &&
        !empty($row->result->associatedSpecimen->identifications)) {
        return formatScientificName(
    		$row->result->associatedSpecimen->identifications[0]->scientificName->fullScientificName,
    		$row->result->associatedSpecimen->identifications[0]->scientificName,
            $searchTerms
	    );
    }
    return null;
}

/**
 * Parses specimen data json searched by name to PHP array
 *
 * Unlike the other parse functions, this one may forward to json to "specialised"
 * function: parseSpecimensByMap(). Additionally,this function differentiates between
 * grouped results and results per single taxon.
 *
 * @param string $json NBA response
 * @return array $output
 */
function parseSpecimensByTaxon ($json) {
	if (!$json || !validJson($json)) {
		handleError('parseSpecimensByTaxon: no or invalid json response');
	}
	$data = json_decode($json);
	$output['searchTerms'] = getSearchTerms($data);

	$output['total'] = getTotalRows($data);
	if (!$output['searchTerms']) {
		handleError('parseSpecimensByTaxon: invalid json response');
	}

    // If showMap parameter has been set, parsing and printing should be redirected
    // to parse-/printSpecimensByMap
    if (isset($output['searchTerms']['_showMap'])) {
        return parseSpecimensByMap($data);
    }

	if ($output['total'] == 0) {
	    $output['results'] = array();
        return $output;
	}

    // Parameter that determines if results are for group or single taxon
    $single = isset($output['searchTerms']['single']) ? true : false;

    foreach ($data->resultGroups as $row) {
		$d = array();
		$d['name'] = formatScientificName(
			$row->sharedValue,
			$row->searchResults[0]->result->identifications[0]->scientificName,
    		$output['searchTerms']
		);
		$d['url'] = getTaxonUrl($row->searchResults[0]->links,
		    $row->searchResults[0]->result->identifications[0]->scientificName);
		$d['fullScientificName'] = $row->sharedValue;
		$d['count'] = $row->totalSize;
		$d['sources'] = getSources($row);
		$d['score'] = $row->searchResults[0]->percentage;
		foreach ($row->searchResults as $i => $sp) {
    		$assemblageID = $sp->result->assemblageID;
    		$s['unitID'] = setUnitId($sp->result->unitID);
    		$s['recordBasis'] = $sp->result->recordBasis;
    		$s['kindOfUnit'] = $sp->result->kindOfUnit;
    		$s['preparationType'] = $sp->result->preparationType;
    		$s['collectionType'] = $sp->result->collectionType;
    		$s['url'] = $sp->links[0]->href;
    		$s['score'] = $sp->score;
            empty($assemblageID) ? $d['specimens'][] = $s : $d['sets'][$assemblageID][] = $s;
		}
		$d['allLink'] = $d['count'] > maxGroupResults() ?
            specimenNamesService() . '/?identifications.scientificName.fullScientificName.raw=' .
            urlencode(urlencode($row->sharedValue)) . '&_sort=unitID&_sortDirection=ASC' : '';
		$output['results'][] = $d;
	}

	$output['self'] = getSelfLink($data);
	$output['showAll'] = getShowAll($data, isGroupService(specimenNamesService()));
	$output['paginator'] = $single ?
	   getPaginatorWithinGroup($data) :
	   getPaginator($data, isGroupService(specimenNamesService()));
	$output['single'] = $single;

	// Only set filter when performing initial search
	if ($output['searchTerms']['_maxResults'][0] == maxResultsInitial()) {
	    $_SESSION['ndaFilters']['specimenName'] = $output['showAll'];
	}

	return isset($output) ? $output : false;
}

/**
 * Replaces registration numbers with multiple spaces with non-breaking spaces
 *
 * Some Brahms registration numbers contain double spaces, e.g. L  012345;
 * If these are used without modification, they are presented on the site with
 * a single space, and these numbers cannot be properly copy/pasted to search fields.
 *
 * @param string $string
 * @param string $field Extra parameter so function can be used in loop over json data
 * @return string $string
 */
function setUnitId ($string, $field = false) {
    if (!$field || $field == 'unitID') {
        return str_replace(' ', '&nbsp;', $string);
    }
    return $string;
}

/**
 * Reverses setUnitId()
 *
 * @param string $string Unit id to "decode"
 * @return string $string
 */
function unsetUnitId ($string) {
    return str_replace('&nbsp;', ' ', $string);
}

/**
 * Parses specimen data json searched by name and map to PHP array
 *
 * As the data arrives to this function through parseSpecimensByTaxon(),
 * json parsing and validation can be skipped.
 *
 * @param array $data Parsed json from parseSpecimensByTaxon()
 * @return array $output
 */
function parseSpecimensByMap ($data) {

	$output['searchTerms'] = getSearchTerms($data);
	$output['total'] = getTotalRows($data);
	$output['_showMap'] = true;

	foreach ($data->resultGroups as $row) {
		$d = array();
		$name = formatScientificName(
			$row->sharedValue,
		    // @todo
			//$row->searchResults[0]->result->identifications[getResultOffset($row)]->scientificName,
			$row->searchResults[0]->result->identifications[0]->scientificName,
		    getHits($row->searchResults[0])
		);
		$sources = getSources($row);
		foreach ($row->searchResults as $i => $sp) {
    		$d['name'] = $name;
    		$d['taxonUrl'] = getTaxonUrl($row->searchResults[0]->links,
		        $row->searchResults[0]->result->identifications[0]->scientificName);
    		$d['url'] = $sp->links[0]->href;
    		$d['source'] = implode(', ', $sources);
    		$d['assemblageID'] = $sp->result->assemblageID;
    		$d['unitID'] = setUnitId($sp->result->unitID);
    		$gatheringEvent = getGatheringEventSpecimens($row, $i);
    		$d['localityText'] = $gatheringEvent['localityText'];
    		$d['date'] = $gatheringEvent['dateTimeBegin'];
    		$d['lat'] = $gatheringEvent['siteCoordinates']['lat'];
    		$d['lon'] = $gatheringEvent['siteCoordinates']['lon'];
    		$output['results'][] = $d;
		}
	}

	$output['self'] = getSelfLink($data);
	return isset($output) ? $output : false;
}

/**
 * Gets Show all... link
 *
 * Show all link is shown only when the user does not come from a form and
 * when the number of results exceeds the maximum number of initial results.
 * The latter setting depends on the fact if it's a service that has regulr or grouped
 * results.
 *
 * @param array $data Parsed json
 * @param boolean $groupResult Service has grouped results?
 * @return string|void Url
 */
function getShowAll ($data, $groupResult = false) {
	if (isset($_SESSION['ndaRequestType']) && $_SESSION['ndaRequestType'] == 'form' &&
	    getTotalRows($data) > maxResultsInitial()) {
	    $self = getSelfLink($data);
	    if (!empty($self)) {
            return setUrlPars(
                geoShapeToSession($self, true),
                array('_maxResults' => $groupResult ? maxGroupResults() : maxResults()),
                true
            );
	    }
	}
	return null;
}

/**
 * Gets sort parameter
 *
 * Gets sort parameter from self link or, if self link is not provided,
 * returns default value
 *
 * @param string $self Self link
 * @param boolean $groupResult Service has grouped results?
 * @return string Result from self link or default value if self link is not provided
 */
function getSort ($self, $groupResult = false) {
    $p = $groupResult ? '_groupSort' : '_sort';
    if (!empty($self)) {
        $value = getUrlParValue(urldecode($self), $p);
        if (!empty($value)) {
            return $value;
        }
    }
    return $groupResult ? defaultGroupSort() : defaultSort();
}

/**
 * Gets sort direction
 *
 * Gets sort direction parameter from self link or, if self link is not provided,
 * returns default value
 *
 * @param string $self Self link
 * @param boolean $groupResult Service has grouped results?
 * @return string Result from self link or default value if self link is not provided
 */
function getSortDirection ($self, $groupResult = false) {
    $p = $groupResult ? '_groupSortDirection' : '_sortDirection';
    if (!empty($self)) {
        $value = getUrlParValue(urldecode($self), $p);
        if (!empty($value)) {
            return $value;
        }
    }
    return $groupResult ? defaultGroupSortDirection() : defaultSortDirection();
}

/**
 * Sets sort url
 *
 * @param string $column Field to sort on
 * @param string $dir Default sort direction for column
 * @param string $self Self link
 * @param boolean $groupResult Service has grouped results?
 * @return string Url
 */
function setSortUrl ($column, $dir, $self, $groupResult = false) {

    // Set parameters differently for default or grouped results
    $offset = $groupResult ? '_groupOffset' : '_offset';
    $sort = $groupResult ? '_groupSort' : '_sort';
    $sortDirection = $groupResult ? '_groupSortDirection' : '_sortDirection';

    // Column currently selected; only switch sort direction
    if ($column == getSort($self, $groupResult)) {
        return setUrlPars(
            geoShapeToSession($self, true),
            array(
                $sortDirection => getSortDirection($self, $groupResult) == 'DESC' ? 'ASC' : 'DESC',
                $offset => 0
            ),
            true
        );
    }
    // Other column is currently selected; set to current column in default direction
    return setUrlPars(
        geoShapeToSession($self, true),
        array(
            $sort => $column,
            $sortDirection => $dir,
            $offset => 0
        ),
        true
    );
}

include 'Paginator.php';

/**
 * Paginator
 *
 * Returns html-formatted paginator based on json input. $groupResult is used to
 * differentiate between regular or grouped services.
 *
 * @param unknown $data Parsed json
 * @param boolean $groupResult Regular or grouped service?
 * @return Html-formatted paginator | void
 */
function getPaginator ($data, $groupResult = false) {
    if (isset($_SESSION['ndaRequestType']) && $_SESSION['ndaRequestType'] != 'form') {
        $paginator = new Paginator(
            getTotalRows($data),
            setPaginatorItemsPerPage($groupResult),
            setPaginatorCurrentPage($data, $groupResult),
            setPaginatorUrl($data, $groupResult)
        );
        return $paginator->toHtml();
    }
    return null;
}

/**
 * Special case: paginator used for results within grouped results
 *
 * A modified function for getPaginator for results within a grouped result. The problem
 * was that the $groupedResult flag in that function cannot be used, because getTotalRows
 * would need to differentiate to accept the results of a group or within a group
 * (for services that returned grouped results). Instead of introducing a potentialy
 * confusing third parameter, this special case function handles the paginator for results
 * within a grouped result.
 *
 * @param array $data Json
 * @return Formatted html|void
 */
function getPaginatorWithinGroup ($data) {
    if (isset($_SESSION['ndaRequestType']) && $_SESSION['ndaRequestType'] != 'form') {
        $paginator = new Paginator(
            getTotalRowsWithinGroup($data),
            setPaginatorItemsPerPage(),
            setPaginatorCurrentPage($data),
            setPaginatorUrl($data)
        );
        return $paginator->toHtml();
    }
    return null;
}

/**
 * Sets maximum number of results per page for paginator
 *
 * @param boolean $groupResult Regular or grouped service?
 * @return int Maximum number of results per page dependent of grouped or not
 */
function setPaginatorItemsPerPage ($groupResult = false) {
    return $groupResult ? maxGroupResults() : maxResults();
}

/**
 * Sets current page number for paginator
 *
 * @param boolean $groupResult Regular or grouped service?
 * @return int Current page number dependent of grouped or not
 */
function setPaginatorCurrentPage ($data, $groupResult = false) {
    return $groupResult ?
        getGroupOffset($data) / maxGroupResults() + 1 :
        getOffset($data) / maxResults() + 1;
}

/**
 *
 * Sets url for paginator
 *
 * Strips offset from self link and replaces this with placeholder for paginator
 *
 * @param array $data Json
 * @param boolean $groupResult
 * @return string Url
 */
function setPaginatorUrl ($data, $groupResult = false) {
    $offset = $groupResult ? 'groupOffset' : 'offset';
    return printDrupalLink(
        stripOffsetFromUrl(geoShapeToSession(urldecode(getSelfLink($data)))) . '&_' . $offset . '='
    ) . '(:num)';
}

/**
 * Adds or replaces parameters in url with new parameters
 *
 * @param string $url Input url
 * @param array $newValues New values as key => value pairs
 * @param boolean $decodeEncode Decode url before replacement?
 * @return string $url Output string
 */
function setUrlPars ($url, array $newValues, $decodeEncode = false) {
    if ($decodeEncode) {
        $url = urldecode($url);
    }
    $parts = parse_url($url);
    safe_parse_str($parts['query'], $q);
    foreach ($newValues as $p => $v) {
        $q[$p] = $v;
    }
    $parts['query'] = http_build_query($q);
    $url = reverse_parse_url($parts);
    return $decodeEncode ? urlencode($url) : $url;
}

/**
 *  Replaces the value of the _geoShape parameter from any NBA-created url with [session].
 *  Stores the value in a session parameter, which should be retrieved when creating the NBA request.
 *
 * @param string $url
 * @return string, session parameter
 */
function geoShapeToSession ($url, $decodeEncode = false) {
    if ($decodeEncode) {
        $url = urldecode($url);
    }
    $parts = parse_url($url);
    safe_parse_str($parts['query'], $q);
    if (isset($q['_geoShape'])) {
        $_SESSION['ndaStoredGeoShape'] = $q['_geoShape'];
        $q['_geoShape'] = '[session]';

        $parts['query'] = http_build_query($q);
        $url = reverse_parse_url($parts);
    }
    return $decodeEncode ? urlencode($url) : $url;
}

/**
 * Strips _offset and _groupOffset from url
 *
 * @param string $url Input url
 * @param string $decodeEncode Decode url before replacement?
 * @return string $url Output url
 */
function stripOffsetFromUrl ($url, $decodeEncode = false) {
    if ($decodeEncode) {
        $url = urldecode($url);
    }
    $parts = parse_url($url);
    safe_parse_str($parts['query'], $q);
    foreach (array('_offset', '_groupOffset') as $p) {
        if (isset($q[$p])) {
            unset($q[$p]);
        }
    }
    $parts['query'] = http_build_query($q);
    $url = reverse_parse_url($parts);
    return $decodeEncode ? urlencode($url) : $url;
}

/**
 * Gets value for specified parameter in url
 *
 * @param string $url Input utl
 * @param string $par Parameter to get value for
 * @return string|void Value
 */
function getUrlParValue ($url, $par) {
    if ($url != '' && $par != '') {
        $parts = parse_url($url);
        if (!empty($parts)) {
            safe_parse_str($parts['query'], $q);
            foreach ($q as $p => $v) {
                if ($p == $par) {
                    return $v;
                }
            }
        }
    }
    return false;
}

/**
 * Gets self link for current request
 *
 * Rather straightforward if the result is from a GET request. If the result is from
 * a POST request, the self link has to be reconstructed from the search terms in
 * the request.
 *
 * @param array $data Json
 * @return string|void Self link
 *
 */function getSelfLink ($data) {
    if (isset($data->links) && !empty($data->links)) {
        foreach ($data->links as $link) {
            if ($link->rel == '_self') {
                $self = $link->href;
                break;
            }
        }
    }
    if (!isset($self) || empty($self)) {
        return false;
    }
    // If data is returned from a POST request, we have to recompile the
    // self link from the search terms...
    $post = strpos(urldecode($self), '?') === false ? true : false;
    if ($post) {
        $p = '/?';
        foreach (getSearchTerms($data) as $k => $v) {
            $p .= $k . '=' . $v[0] . '&';
        }
        return $self . urlencode(substr($p, 0, -1));
    }
    return $self;
}

/**
 * Reassembles parsed url
 *
 * Function from php.net to reverse parse_url:
 * http://php.net/manual/en/function.parse-url.php#106731
 * Replacement for http_buil_url() because that function requires PECL.
 *
 * @param array $parsed_url Url components
 * @return string Reassembled url
 */
function reverse_parse_url ($parsed_url) {
    $scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';
    $host = isset($parsed_url['host']) ? $parsed_url['host'] : '';
    $port = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';
    $user = isset($parsed_url['user']) ? $parsed_url['user'] : '';
    $pass = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : '';
    $pass = ($user || $pass) ? "$pass@" : '';
    $path = isset($parsed_url['path']) ? $parsed_url['path'] : '';
    $query = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';
    $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';
    return "$scheme$user$pass$host$port$path$query$fragment";
}

/**
 * Gets _offset from json
 *
 * @param array $data Json
 * @return int Offset
 */
function getOffset ($data) {
    if (isset($data->queryParameters->_offset[0])) {
        return $data->queryParameters->_offset[0];
    }
    return 0;
}

/**
 * Gets _groupOffset from json
 *
 * @param array $data Json
 * @return int Group offset
 */
function getGroupOffset ($data) {
    if (isset($data->queryParameters->_groupOffset[0])) {
        return $data->queryParameters->_groupOffset[0];
    }
    return 0;
}

/**
 * Gets image url from json
 *
 * @param array $row Json
 * @return string|void Url
 */
function getImageUrl ($row) {
    if (!empty($row->result->serviceAccessPoints)) {
    	$key = key(get_object_vars($row->result->serviceAccessPoints));
    	return $row->result->serviceAccessPoints->{$key}->accessUri;
    }
    return null;
}

/**
 * Gets image url plus format from json
 *
 * @param array $row Json
 * @return array|void Array with url and format
 */
function getImageData ($row) {
    if (!empty($row->result->serviceAccessPoints)) {
    	$key = key(get_object_vars($row->result->serviceAccessPoints));
    	return array(
    	   $row->result->serviceAccessPoints->{$key}->accessUri,
    	   $row->result->serviceAccessPoints->{$key}->format
    	);
    }
    return null;
}

/**
 * Gets the fields containing data matching the search term(s)
 *
 * @param array $row Parsed json
 * @param boolean $stripTags Should html tags be removed?
 * @return array Array with field => value pairs
 */
function getHits ($row, $stripTags = true) {
    // Exclude matches in these fields
    $noHits = array(
        'fullScientificName',
        'theme'
    );
	foreach ($row->matchInfo as $info) {
		// Extract field from path.to.field; field is the last part
		$e = explode('.', $info->path);
		$field = end($e);
		if (!in_array($field, $noHits)) {
            $hits[$field] = $stripTags ? strip_tags($info->valueHighlighted) :
                $info->valueHighlighted;
		}
	}
	return isset($hits) ? $hits : array();
}

include 'printSpecimensByTaxon.php';
include 'printSpecimensByMap.php';
include 'printSpecimenCollection.php';

/**
 * Shorthand function to pad "filler" tds
 *
 * @param int $i How many tds should be padded?
 * @return string|void
 */
function padTds ($i) {
	if ((int)$i > 0) {
		return "<td colspan='$i'></td>";
	}
	return null;
}

/**
 * Get url for Nth specimen in "collection"/set
 *
 * @param int $i Offset for specimen in searchResults->links
 * @return string|void Url
 */
function getSpecimenInCollectionUrl ($row, $i) {
	if (!empty($row->searchResults[0]->links)) {
		foreach ($row->searchResults[0]->links as $link) {
			if ($link->rel == 'specimen-detail.otherSpecimensInSet.' . $i) {
				return $link->href;
			}
		}
	}
	return null;
}

include 'printHeaders.php';

/**
 * Parses taxon json to PHP array
 *
 * @param string $json
 * @return array $output
 */
function parseTaxa ($json) {
    global $language;
	if (!$json || !validJson($json)) {
		handleError('parseTaxon: no or invalid json response');
	}
	$data = json_decode($json);

	$output['total'] = getTotalRows($data);
	$output['searchTerms'] = getSearchTerms($data);
	if (!$output['searchTerms']) {
		handleError('parseTaxon: invalid json response');
	}
	if ($output['total'] == 0 || empty($data->resultGroups)) {
	    $output['results'] = array();
        return $output;
	}
	foreach ($data->resultGroups as $row) {
		$d = array();
		// Accepted scientific name, synonym, or common name
		$d['type'] = getResultType($row);
		$d['rank'] = $row->searchResults[0]->result->taxonRank;
		$d['name'] = formatScientificName(
			strip_tags($row->searchResults[0]->result->acceptedName->fullScientificName),
			$row->searchResults[0]->result->acceptedName,
			$output['searchTerms']
		);
		if ($d['type'] == 'accepted') {
			$d['description'] = t(ucfirst($d['rank']));
		} else if ($d['type'] == 'synonym') {
            $offset = getTaxonSynonymOffset($row);
			$d['description'] = t('Synonym') . ': ' .
                formatScientificName(
    				strip_tags($row->searchResults[0]->result->synonyms[$offset]->fullScientificName),
    				$row->searchResults[0]->result->synonyms[$offset],
    				$output['searchTerms']
    			);
		} else if ($d['type'] == 'common') {
			$d['description'] = t('Common name(s)') . ': ';
			foreach ($row->searchResults[0]->matchInfo as $i => $info) {
                $vernaculars[] = highlightSearchTerms(
    				strip_tags($info->valueHighlighted),
    				$output['searchTerms']
    		    );
			}
			$d['description'] .= implode(', ', $vernaculars);
			unset($vernaculars);
		}

		$d['url'] = urldecode($row->searchResults[0]->links[0]->href);
		$d['sources'] = getSources($row);
		$d['commonNames'] = ($d['type'] != 'common' ? getCommonNames($row, true) : array());
		$d['score'] = $row->searchResults[0]->percentage;
		$output['results'][] = $d;
	}

	$output['self'] = getSelfLink($data);
	$output['showAll'] = getShowAll($data);
	$output['paginator'] = getPaginator($data);

	// Only set filter when performing initial search
	if ($output['searchTerms']['_maxResults'][0] == maxResultsInitial()) {
	    $_SESSION['ndaFilters']['taxon'] = $output['showAll'];
	}

	return isset($output) ? $output : false;
}

/** Gets offset of matched synonym in taxon response
 *
 * Indirect way to determine the offset of the matched synonym: check match
 * against value of field in synonyms and return offset of first hit
 *
 * @param array $row Parsed json
 * @return int|void $i
 */
function getTaxonSynonymOffset ($row) {
    $path = $row->searchResults[0]->matchInfo[0]->path;
    $field = str_replace('synonyms.', '', $path);
    foreach ($row->searchResults[0]->result->synonyms as $i => $synonyms) {
        if ($synonyms->$field ==
            strip_tags($row->searchResults[0]->matchInfo[0]->valueHighlighted)) {
            return $i;
        }
    }
    return false;
}

/** Prints no result message
 *
 * @return string Translated string with url back to form
 */
function printNoResults () {
    return t('Sorry, no results found') . '. <a href="' . setStartUrl() . '?searchagain=1">' .
        t('Please try again'). '</a>!';
}

include 'printTaxa.php';


/**
 * Validates json
 *
 * @param boolean Valid?
 */
function validJson ($string) {
	return is_object(json_decode($string));
}

/**
 * Gets result type (accepted/synonym/common) for taxon
 *
 * Returns type of result:
 * acceptedName.fullScientificName
 * acceptedName.synonyms[0].scientificName.fullScientificName
 * acceptedName.commonNames[0].name
 *
 * @param array $row Parsed json
 * @return string accepted/synonym/common
 */
function getResultType ($row) {
	$path = $row->searchResults[0]->matchInfo[0]->path;
	return strpos($path, 'synonym') !== false ? 'synonym' :
		(strpos($path, 'vernacularNames') !== false ? 'common' : 'accepted');
}

/**
 *
 * Gets offset for synonym/common name in taxon response
 *
 * Returns offset of result; used only for synonyms and common names to
 * determine the array key containing the hit
 *
 * NOTE: currently not in use because final NBA response does not match
 * mock object for which this function was developed...
 *
 * @param array $row Parsed json
 * @return unknown
 */
function getResultOffset ($row) {
	preg_match('/\[(.*?)\]/', $row->searchResults[0]->matchInfo[0]->path, $m);
	return $m[1];
}

/**
 * Total size
 *
 * Number of results in json response
 *
 * @param array $data Parsed json
 * @return number|boolean
 */
function getTotalRows ($data, $groupResult = false) {
	if (isset($data->totalSize)) {
		return (int)$data->totalSize;
	}
	return false;
}

/**
 * Special case function for number of results in json response within a grouped result
 *
 * @param array $data Parsed json
 * @return number|boolean
 */
function getTotalRowsWithinGroup ($data) {
	if (isset($data->resultGroups[0]->totalSize)) {
		return (int)$data->resultGroups[0]->totalSize;
	}
	return false;
}

/**
 * Gets query parameters
 *
 * @param array $data Parsed json
 * @return array|void Parameters
 */
function getSearchTerms ($data) {
	if (isset($data->queryParameters)) {
		return (array)$data->queryParameters;
	}
	return false;
}

/**
 * Creates properly formatted scientific name
 *
 * @param string $scientificname
 * @param object $nameObject Parsed json with individual name components
 * @param string $searchTerms Optional highlighting
 * @return string
 */
function formatScientificName ($scientificname, $nameObject, $searchTerms = false) {
	$output = $scientificname;
	$elements = getScientificNameElements($nameObject);
    $f = array(chr(4), chr(7));
	$r = array('<span class="scientific">', '</span>');

	foreach ($elements as $e) {
		if (!empty($e)) {
			$output = str_replace($e, chr(4) . $e . chr(7), $output);
		}
	}
	$output = str_replace($f, $r, $output);

	// Highlight the formatted output
	return $searchTerms ? highlightSearchTerms($output, $searchTerms) : $output;
}

/**
 * Highlight search terms
 *
 * @param string $string
 * @param array $searchTerms
 * @return string $string
 *
 */function highlightSearchTerms ($string, $searchTerms) {
    foreach ($searchTerms as $field => $value) {
        // Do not highlight search flags
         if (!in_array(str_replace('_', '', $field), searchFlags())) {
            $term = is_array($value) ? $value[0] : $value;
            // Split terms on space if necessary
            $t = explode(' ', $term);
            // Store as array keys to eliminate duplicates
            foreach ($t as $i => $v) {
                $terms[$v] = $field . $i;
            }
        }
    }
    if (isset($terms)) {
        $string = highlightMatch($string, array_flip($terms));
    }
    return $string;
}

/**
 * Extracts scientific name components from json name object
 *
 * Returns scientific name elements from name object. Stores as keys and
 * flips to avoid duplicates (as in Larus fuscus fuscus)
 *
 * @param object $name Name object from json
 * @return array
 */
function getScientificNameElements ($name) {
	$elements = array(
		$name->genusOrMonomial => 'genusOrMonomial',
		$name->subgenus => 'subgenus',
		$name->specificEpithet => 'specificEpithet',
		$name->infraspecificEpithet => 'infraspecificEpithet'
	);
	return array_flip($elements);
}

/**
 * Extracts scientific name components from json name object, but unlike
 * getScientificNameElements() does not filter out duplicates
 *
 * Returns scientific name elements from name object.
 *
 * @param object $name Name object from json
 * @return array
 */
function getScientificNameElementsWithDuplicates ($name) {
	return array(
		'genusOrMonomial' => $name->genusOrMonomial,
		'subgenus' => $name->subgenus,
		'specificEpithet' => $name->specificEpithet,
		'infraspecificEpithet' => $name->infraspecificEpithet
	);
}

/**
 * Checks if multimedia at specific url is mp4 file
 *
 * Visits url and checks headers. Movie files should be treated differently
 * from image files.
 *
 * @param string $url Url to multimedia file
 * @return boolean
 */
function isMp4 ($url) {
    $headers = get_headers($url);
    foreach ($headers as $i => $v) {
        if (strpos($v, 'mp4') !== false) {
            return true;
        }
    }
    return false;
}

/**
 * Returns all sources for taxon/specimen
 *
 * @param array $row Parsed json
 * @return array|void
 */
function getSources ($row) {
	foreach ($row->searchResults as $i => $obj) {
		$output[$obj->result->sourceSystem->name] = $i;
	}
	return isset($output) ? array_flip($output) : false;
}

/**
 * Gets common names for taxon
 *
 * Return format is array(name => language), so duplicates will be avoided.
 * Language check is optional. If selected, only common names for the
 * current interface language will be returned.
 *
 * @param array $row Parsed json
 * @param boolean $languageCheck
 * @return array|void
 */
function getCommonNames ($row, $languageCheck = false) {
	global $language;
	foreach ($row->searchResults as $i => $taxon) {
		if (isset($taxon->result->vernacularNames)) {
			foreach ($taxon->result->vernacularNames as $name) {
				// If language is set, only store when language of
				// common name matches that of interface...
				if ($languageCheck) {
					if ($name->language == $language->name) {
						$output[$name->name] = $name->language;
					}
				// ... else always return all names
				} else {
					$output[$name->name] = $name->language;
				}
			}
		}
	}
	return isset($output) ? $output : false;
}

/**
 * Decorates description in taxon result table
 *
 * @param array $row Parsed json
 * @return string
 */
function decorateDescription ($row) {
	return ($row['type'] != 'accepted' ?
		t(ucfirst($row['type'])) . ($row['type'] == 'common' ? ' ' . t('name') : '') .
		' ' . t('for') . ' ' :  '') . ($row['type'] == 'accepted' ? t(ucfirst($row['rank'])) :
		t($row['rank']));
}

/**
 * Decorates score in result table
 *
 * @param int $score Percentage from NBA response
 * @return string Formatted html
 */
function decorateScore ($score) {
    // Reset score so always one square is filled
    $score = $score < 20 ? 20 : $score;
	$roundScore = round( $score / 20 );
    $result = "<span class='score' title='$score %'>";

    for ($i = 1; $i <= 5; $i++){
        if ($i <= $roundScore){
            $result.= "<i class='icon-square_full'></i>";
        } else {
            $result.= "<i class='icon-square_empty'></i>";
        }
    }

    return $result .= "</span>";
}


/**
 * Highlight match
 *
 * Experimental highlight function from Linnaeus NG by Maarten Schermer
 *
 * @param string $haystack Input string
 * @param array $needles Matches
 * @return string
 */
function highlightMatch ($haystack, $needles) {

    // Intermediate set required to prevent highlighting of html
    $f = array('<span class="scientific">', '</span>', '&nbsp;', '<span class="result-query">');
    $r = array(chr(4), chr(7), chr(13), chr(14));
    $haystack = str_replace($f, $r, $haystack);

    foreach ($needles as $needle) {
	    $needle = trim($needle);
	    if (!is_string($needle) || stripos(strip_tags($haystack), $needle)===false || is_null($needle)) {
			continue;
		}
		$q = str_split($needle);
		$x = ')(\<[^<]*\>)*(';
		$q = str_replace('( )','(\s*)', '('.implode($x, $q) . ')');
		$haystack = preg_replace_callback('/' . $q.'/i', '_fsub1', $haystack);
	}

	// Restore temporarily replaced tags
	return str_replace($r, $f, $haystack);
}

/**
 * Helper callback function for highlightMatch()
 */
function _fsub1 ($m) {
	return chr(14) . preg_replace_callback('(<(.*?)>)', '_fsub2', $m[0]) . chr(7);
}

/**
 * Helper callback function for highlightMatch()
 */
function _fsub2 ($m) {
	return chr(7) . $m[0] . chr(14);
}

/**
 * Formats number to English/Dutch systems
 *
 * Customized internationalisation to format number that only works for EN/NL
 *
 * @param int/string $n Input number
 * @return string Formatted number
 */
function _formatNumber ($n) {
    global $language;
    if ($language->language == 'nl') {
        return number_format($n, 0, ',', '.');
    }
    return number_format($n);
}

/**
 * Sorts associative array based on another associative array
 *
 * From http://stackoverflow.com/questions/348410/sort-an-array-by-keys-based-on-another-array
 *
 * @param array $array
 * @param array $orderArray
 * @return array
 */
function sortArrayByArray ($array, $orderArray) {
    $ordered = array();
    foreach ($orderArray as $key) {
        if (array_key_exists($key,$array)) {
            $ordered[$key] = $array[$key];
            unset($array[$key]);
        }
    }
    return $ordered + $array;
}

/**
 * Wrapper for logging
 *
 * Currently log to watchdog and print error on screen. Can be adapted to
 * instantantly die() etc.
 *
 * @param string $message
 */
function handleError ($message) {
    //Log to the drupal error log
    watchdog("ndabioresults", $message, NULL, WATCHDOG_ERROR);
    //Log to the screen?
    drupal_set_message("Bioportal: " . $message);
}

/**
 * Translates NBA fields (usually ABCD/DC) to proper English
 *
 * Uses Drupal nba2text Taxonomy for translation
 *
 * @param string $str Input string
 * @return string Translated string
 */
function translateNdaField ($str) {
    $machine_name = "nba2text";
    $myvalue = taxonomy_get_term_by_name($str, $machine_name);
    if (is_array($myvalue)) {
        $myvalues = array_shift($myvalue);
        if(!empty($myvalues)) {
            return t($myvalues->description);
        }
    }
    return t($str);
}

/**
 * Recreates NBA request url for Drupal
 *
 * Enriches the NBA request url by appending the basic search parameters
 * to the base url and path to this module.
 *
 * @param string $url NBA search parameters
 * @return string Drupal url
 */
function printDrupalLink ($url) {
    return setBasePath() . 'nba/result?nba_request=' . urlencode($url);
}

/**
 * Beautifies source output
 *
 * @param string $string
 * @return string
 */
function _markUp($string){
  $result = $string;
  $result = preg_replace('/^\s+|\n|\r|\s+$/m', '', $result);

  $result = str_replace(
    array("    <h2",  "<table",        "<thead",      "<tbody",      "<tr",        "<td",        "<th ",   "<a class='polaroid'"),
    array("\n\n<h2","\n\n<table","\n\n\t<thead","\n\n\t<tbody","\n\t\t<tr","\n\t\t\t<td","\n\t\t\t<th ", "\n<a class='polaroid' "),
    $result
  );

  $result = str_replace(
    array(  "</table",    "</thead",    "</tbody",     "</tr",        "</td",        "</th>"),
    array("\n</table","\n\t</thead","\n\t</tbody","\n\t\t</tr","\n\t\t\t</td","\n\t\t\t</th>"),
    $result
  );

  return $result;
}

/**
 * Translates decimal coordinate pair to DMS
 *
 * Adapted from
 * https://www.dougv.com/2012/03/converting-latitude-and-longitude-coordinates-between-decimal-and-degrees-minutes-seconds/
 *
 * Takes decimal coordinates and return degree, minute, second notation. Original function only
 * accepted single parameter; adapted to take both latitude and longitude immediately
 *
 * @param Decimal $lat Latitude
 * @param Decimal $lon Longitude
 * @return string Latitude, longitude
 */
function decimalToDMS ($lat, $lon) {
     $coordinates = array(
        'lat' => $lat,
        'lon' => $lon
     );
     foreach ($coordinates as $type => $decimal) {
        if (!is_numeric($decimal) || abs($decimal) > 180) {
            return false;
        }
        if ($type == 'lat' && $decimal < 0) {
              $direction = t('S');
        } else if ($type == 'lon' && $decimal < 0) {
          $direction = 'W';
        } else if ($type == 'lon') {
          $direction = t('E');
        } else {
          $direction = 'N';
        }
        $d = abs($decimal);
        $degrees = floor($d);
        $seconds = ($d - $degrees) * 3600;
        $minutes = floor($seconds / 60);
        $seconds = floor($seconds - ($minutes * 60));
        $output[$type] = $degrees . '&deg;' . $minutes . "'" . $seconds . '"' . $direction;
     }
     return isset($output) && count($output) == 2 ? implode(', ', $output) : false;
}

/**
 * Sets head and (optionally) page title
 *
 * @param string $head Head title
 * @param string $page Page title
 */
function setTitle ($head, $page = '') {
    $_SESSION['ndaSearch']['pageTitle'] = $head;
    drupal_set_title($page);
}

/**
 * Shorthand function for print_r()
 */
 function p ($a) {
   //echo '<pre>'; print_r($a); echo "</pre>\n\n";
}

/**
 * Formats string between tags and optionally appends class
 *
 * @param string $input
 * @param string $tag
 * @param string $class
 * @return string
 */
function _wrap ($input, $tag = "div", $class = ""){
  $class = ($class == "" ? "": " class='$class'" );
  return "<$tag$class>$input</$tag>";
}

/**
 * Prints description list
 *
 * @param string $field
 * @param string $value
 * @return string
 */
function printDL ($field, $value) {
  return "<dl><dt>$field</dt><dd>$value</dd></dl>";
}

/**
 * Prints table row
 *
 * @param string $field
 * @param string $value
 * @return string
 */
function printTableRow ($field, $value) {
	return "<tr><td>" . ($field != '' ? t(translateNdaField($field)) : '') . "</td><td>" .
		($value != '' ? $value : '') . "</td></tr>";
}

/**
 * Tests if service is regular or grouped service
 *
 * @param string $service
 * @return boolean
 */
function isGroupService ($service) {
    return in_array($service, groupServices());
}

/**
 * Helper function that parses query string into array
 *
 * Alternate function for parse_url that preserves periods and other special
 * characters in parameter names
 *
 * @param array $target Output
 * @param string $source Input
 * @return array
 */
function safe_parse_str ($source, &$target) {
    if (!$source) {
        return;
    }
    $keys = $target = array();
    $source = preg_replace_callback(
        '/
        # Match at start of string or &
        (?:^|(?<=&))
        # Exclude cases where the period is in brackets, e.g. foo[bar.blarg]
        [^=&\[]*
        # Affected cases: periods and spaces
        (?:\.|%20)
        # Keep matching until assignment, next variable, end of string or
        # start of an array
        [^=&\[]*
        /x',
        function ($key) use (&$keys) {
            $keys[] = $key = base64_encode(urldecode($key[0]));
            return urlencode($key);
        },
        $source
    );
    parse_str($source, $data);
    foreach ($data as $key => $val) {
        // Only unprocess encoded keys
        if (!in_array($key, $keys)) {
            $target[$key] = $val;
            continue;
        }

        $key = base64_decode($key);
        $target[$key] = $val;

        if ($keep) {
            // Keep a copy in the underscore key version
            $key = preg_replace('/(\.| )/', '_', $key);
            $target[$key] = $val;
        }
    }
}

/**
 * Determines if prettyPhoto library should be loaded
 *
 * Alternate function for parse_url that preserves periods and other special
 * characters in parameter names
 *
 * @param array $target Output
 * @param string $source Input
 * @return array
 */
function loadPrettyPhoto ($imageUrl) {
    $img = @getimagesize($imageUrl);
    if ($img && $img[0] > 600 || $img[1] > 600) {
        $path = drupal_get_path('module', 'ndabioresults');
        drupal_add_css($path . "/css/prettyPhoto.css");
        drupal_add_js($path . "/js/jquery.prettyPhoto.js");
        drupal_add_js(
            'jQuery(document).ready(function($){
                $("a[rel^=\'prettyPhoto\']").prettyPhoto({
                    social_tools: false
                });
            });',
            array('type' => 'inline', 'scope' => 'footer'));
        return true;
    }
    return false;
}
