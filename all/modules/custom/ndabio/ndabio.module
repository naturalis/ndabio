<?php

/**
 * @file
 * Naturalis bioportal module used to integrate Drupal with the Naturalis Data API formally
 * known as the NDA.
 * @version 0.1
 * @author Naturalis
 * @package Bioportal
 */

/**
 * Default value for the NDA. Can be overridden in the module config page.
 * <siteroot>/admin/config/naturalis
 */
define('NDABIO_NDA', 'http://nda.naturalis.nl');
/**
 * Default value for the NDA GET service. Can be overridden in the module config page.
 * <siteroot>/admin/config/naturalis
 */
define('NDABIO_JSON', 'http://10.42.1.121:8080/nl.naturalis.nda.service.rest/api/specimen/search/');
/**
 * Default value for the NDA POST service. Can be overridden in the module config page.
 * <siteroot>/admin/config/naturalis
 */
define('NDABIO_JSONPOST', 'http://10.42.1.121:8080/nl.naturalis.nda.service.rest/api/specimen/search/');
/**
 * Default value for the GMAP key. Can be overridden in the module config page.
 * <siteroot>/admin/config/naturalis
 */
define('NDABIO_GMAPKEY', 'AIzaSyCv168azSiPAf0wjVe36gNqdANDqEXkpvQ');

/**
 * Advanced search used a drupal taxonomy. This is the systemname of the taxonomy used for
 * building the advances search form.
 * <siteroot>/admin/config/naturalis
 */
define('NDABIO_SEARCHTAXONOMY', 'search');

/**
 * DEFINE CUSTOM PAGES
 * Module administration and all custom pages. Each page includes a callback where the
 * page functionality is defined.
 * @package custompages
 */

/**
 * Implements hook_menu().
 */
function ndabio_menu() {
  //Configuration page
  $items['admin/config/naturalis'] = array(
    'title' => 'Naturalis config',
    'description' => 'Configuration for Naturalis module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ndabio_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['search/geosearch'] = array(
    'page callback' => 'ndabio_geosearch_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['geographic-search'] = array(
    'page callback' => 'ndabio_geosearch_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['naturalis/ndadetail'] = array(
    'title' => 'Details',
    'page callback' => 'ndabio_ndadetail_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
  );

  //Currently used as front page
  $items['search/advancednda'] = array(
    'page callback' => 'ndabio_displayform',
    'access arguments' => array('access content'),
    'title' => t('Advanced Naturalis Data Search'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['search/ndapass'] = array(
    'page callback' => 'ndabio_pass',
    'access arguments' => array('access content'),
  );

  //Page used by javascript to retrieve geo coordinates based on a nid
  $items['naturalis/ajax'] = array(
   'page callback' => 'ndabio_ajax_callback',
   'access arguments' => array('access content'),
   'type' => MENU_CALLBACK,
  );


  //Page used to manually create search taxonomy
  $items['taxonomy/create'] = array(
    'page callback' => 'ndabio_taxonomy_create',
    'access arguments' => array('access content'),
    'title' => t('Taxonomy create'),
    'type' => MENU_LOCAL_TASK,
  );
  //Page used to manually delete search taxonomy
  $items['taxonomy/remove'] = array(
    'page callback' => 'ndabio_taxonomy_remove',
    'access arguments' => array('access content'),
    'title' => t('Taxonomy remove'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
* Output a json formatted detail page with geocoordinates based on the nid passed in the url.
*/
function ndabio_ajax_callback() {
  $geonode = (int)$_GET["nid"];
  
  $sql = "SELECT n.nid, n.title, g.field_geojson_value, s.field_source_value, t.field_type_value FROM {node} n , {field_data_field_geojson} g, {field_data_field_source} s, {field_data_field_type} t WHERE n.nid = $geonode AND n.nid = t.entity_id AND n.nid = g.entity_id AND n.nid = t.entity_id";
  
  $row = db_query($sql)->fetchObject();
  
  if($row) {
    echo '{"nid":' . $geonode . ',"locality":' . json_encode($row->title) . ',"source":' . json_encode($row->field_source_value) . ',"geometry":' . $row->field_geojson_value . '}';
  }
  die();
}

/**
 * Create a new taxonomy named NDABIO_SEARCHTAXONOMY used to create the advanced search form
 *
 */
function ndabio_taxonomy_create() {
  $vocab = taxonomy_vocabulary_machine_name_load(NDABIO_SEARCHTAXONOMY);
  if (empty($vocab)) {
    $new_vocab = (object) array(
      'name' => NDABIO_SEARCHTAXONOMY,
      'description' => 'Search',
      'machine_name' => NDABIO_SEARCHTAXONOMY,
    );
    taxonomy_vocabulary_save($new_vocab);

    //Create a field for nda system name
    $field = array(
      'field_name' => 'field_ndasystem',
      'type' => 'text',
      'label' => 'System',
    );
    $field_instance = field_info_field('field_ndasystem');
    if (empty($field_instance)) {
      $field = field_create_field($field);
    }
    else {
      $field = $field_instance;
    }

    // Attach the field to our taxonomy entity
    $instance = array(
      'field_name' => 'field_ndasystem',
      'entity_type' => 'taxonomy_term',
      'bundle' => NDABIO_SEARCHTAXONOMY,
      'label' => 'System',
      'description' => 'Description',
      'required' => true,
      'widget' => array(
        'type' => 'text_textfield',
        'weight' => 3,
      ),
    );
    field_create_instance($instance);
    // Done


    //Create a field for nda taxonomy type name
    $field = array(
      'field_name' => 'field_ndadatatype',
      'type' => 'text',
      'label' => 'Data type',
    );
    $field_instance = field_info_field('field_ndadatatype');
    if (empty($field_instance)) {
      $field = field_create_field($field);
    }
    else {
      $field = $field_instance;
    }
    // Attach the field to our taxonomy entity
    $instance = array(
      'field_name' => 'field_ndadatatype',
      'entity_type' => 'taxonomy_term',
      'bundle' => NDABIO_SEARCHTAXONOMY,
      'label' => 'Datatype',
      'description' => 'Datatype',
      'required' => false,
      'widget' => array(
        'type' => 'text_textfield',
        'weight' => 4,
      ),
    );
    field_create_instance($instance);
    // Done



    $vocab = taxonomy_vocabulary_machine_name_load(NDABIO_SEARCHTAXONOMY);
  } else {
    foreach(taxonomy_get_tree($vocab->vid) as $term) { taxonomy_term_delete($term->tid); }
  }

  $myterms = _ndabio_return_taxonomy();
  x_arr_to_taxonomy($myterms);
  return "create done.";
}

/**
 *
 */
function ndabio_taxonomy_remove() {
  $vocab = taxonomy_vocabulary_machine_name_load(NDABIO_SEARCHTAXONOMY);
  foreach(taxonomy_get_tree($vocab->vid) as $term) {
    taxonomy_term_delete($term->tid);
  }
  taxonomy_vocabulary_delete($vocab->vid);
  return "remove done.";
}

/**
 * Create a taxonomy tree based on a predefined array, used for initialising
 * the advanced search fields
 */
function x_arr_to_taxonomy($arr_terms, $parent = 0){
  static $_weight = 0;

  foreach ($arr_terms as $key => $value) {
    $_weight++;

    // If the value of the item is a string, I assume we're looking at an end-point
    if (( gettype($value) == 'string' ) || (!empty($value->label))) {
      x_term_save(  $value, $parent, $key, $_weight  );
      // (We use the $key for the system-name fieldâ€¦)

    // otherwise, we're looking at an array and we can iterate further
    } elseif (  gettype($value) == 'array'  ){
      $tid = x_term_save($key, $parent, $key, $_weight);
      x_arr_to_taxonomy( $value, $tid);
    }
  }
}

/**
 * Create a single taxonomy entry
 */
function x_term_save($str_term, $parent = 0, $str_system = '', $int_weight){
  $vocab = taxonomy_vocabulary_machine_name_load(NDABIO_SEARCHTAXONOMY);
  $sysname = (is_numeric($str_system ) ? $str_term : $str_system);

  //Clear path information from system name
  $pos = strpos($sysname, "/");
  if ($pos !== FALSE) {
    $sysname = substr($sysname, $pos + 1);
  }

  //Get term type from term description. Default is a textfield. Use a semicolon to specify date, int,
  $pos = strpos($str_term, ";");
  if ($pos !== FALSE) {
    echo "Multiple values!: " . $str_term . " (" . $str_system . ") " . substr($str_term, $pos + 1);
    $str_term = substr($str_term, 0, $pos);
  }

  $obj_term = (object) array(
     'name' => $sysname,
     'vid' => $vocab->vid,
     'weight' => $int_weight,
     'description' => $str_term,
  );

  $obj_term->field_ndasystem[LANGUAGE_NONE][0]['value'] = (is_numeric($str_system ) ? $str_term : $str_system);
  if ($pos !== FALSE) {
    $obj_term->field_ndadatatype[LANGUAGE_NONE][0]['value'] = substr($str_term, $pos + 1);
  }

  if ( $parent != "0"){
    $obj_term->parent = array($parent);
  }

  taxonomy_term_save( $obj_term );
  return $obj_term->tid;
}


/**
 * Define the initial taxonomy used for buiding the advanced search form.
 */
function _ndabio_return_taxonomy() {
  return array(
    'omnisearch' => 'term',
    'extended' => array(
      'Multimedia' => array(
        'm_unitID' => "Registration number",
        'm_vernacularName' => 'Vernacular name',
        'm_family' => 'Family',
        'm_genusOrMonomial' => 'Genus or monomial',
        'm_speciesEpithet' => 'Species epithet',
        'm_typeStatus' => 'Type status',
        'm_localityText' => 'Locality text',
      '--more--' => array(
            'm_kingdom' => 'Kingdom',
            'm_phylum' => 'Phylum',
            'm_className' => 'Class',
            'm_order' => 'Order',
            'm_subspeciesEpithet' => 'Subspecies epithet',
            'm_phaseOrStage' => 'Phase or stage',
            'm_sex' => 'Sex',
            'm_collectionFieldNumber' => 'Collection field number',
        ),
        '--hide--' => array(
            'm_gatheringAgent' => 'Collector',
            'm_collectingStartDate' => 'Collecting start date',
            'm_expert' => 'Expert name',
            'm_expertOrganisation' => 'Expert organisation',
            'm_taxonomicStatus' => 'Taxonomic status',
            'm_subgenus' => 'subgenus',
            'm_chronostratigraphicAttributiontTypeYoung' => "Youngest chronostratigraphic name",
            'm_chronostratigraphicAttributiontTypeOld' => "Oldest chronostratigraphic name",
            'm_lithostratigraphicAttributionType' => "First lithostratigraphic name",
            'm_lithostratigraphicAttributionType2' => "Second lithostratigraphic name",
            'm_biostratigraphicAttributionTypeOld' => "Oldest biostratigraphic name",
            'm_biostratigraphicAttributionTypeYoung' => "Younest biostratigraphic name",
        )
      ),
      'Collection specimens' => array(
        's_unitID' => array('label' => 'Registration number','georelevant' => TRUE ),
        's_vernacularName' => 'Vernacular name',
        's_family' => 'Family',
        's_genusOrMonomial' => array('label' => 'Genus or monomial', 'georelevant' => TRUE, 'values' => 'Genus|Monomial'),
        's_speciesEpithet' => 'Species epithet',
        's_typeStatus' => 'Type status',
        's_localityText' => 'Locality text',
        's_phaseOrStage' => 'Phase or stage',
        's_sex' => 'Sex',
        '--hide--' => array(
            's_subgenus' => 'Subgenus',
            's_youngestChronstratigraphicName' => 'Youngest chronstratigraphic name',
            's_oldestChronstratigraphicName' => 'Oldest chronstratigraphic name',
            's_firstLithostratigraphicName' => 'First lithostratigraphic name',
            's_secondLithostratigraphicName' => 'Second lithostratigraphic name',
            's_oldestBiostratigraphicName' => 'Oldest biostratigraphic name',
            's_youngestBiostratigraphicName' => 'Youngest biostratigraphic name',
        ),
        '--more--' => array(
            's_kingdom' => 'Kingdom',
            's_phylum' => 'Phylum',
            's_className' => 'Class',
            's_order' => 'Order',
            's_subspeciesEpithet' => 'Subspecies epithet',
            's_gatheringAgent' => 'Collector',
            's_collectingStartDate' => 'Collecting start date',
            's_collectionFieldNumber' => 'Collection field number',
        )
      ),
      'Taxa'  => array(
        't_vernacularName' => 'Vernacular name',
        't_family' => 'Family',
        't_genusOrMonomial' => 'Genus or monomial',
        't_speciesEpithet' => 'Species epithet',
        't_subspeciesEpithet' => 'Subspecies epithet',
        '--more--' => array(
            't_kingdom' => 'Kingdom',
            't_phylum' => 'Phylum',
            't_className' => 'Class',
            't_order' => 'Order',
            't_subgenus' => 'Subgenus',
            't_expert' => 'Expert name',
            't_expertOrganisation' => 'Expert organisation',
            't_taxonomicStatus' => 'Taxonomic status',
        ),
        '--hide--' => array(
        )
      )
    )

  );
}


/**
 * Output detail page.
 */
function ndabio_ndadetail_callback($myid = '', $myaction = NULL) {
  return "<h2>" . t("My ID") . "</h2><pre>" . $myid . " " . $myaction . "</pre>";
}

/**
 *
 */
function ndabio_config_form($form, &$form_state) {
  $form['ndabio_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Naturalis Data API config')
  );
  $form['ndabio_config']['ndabio_config_nda'] = array(
    '#type' => 'textfield',
    '#title' => t('Naturalis Data API URL'),
    '#default_value' => variable_get('ndabio_config_nda', NDABIO_NDA),
    '#size' => 140,
    '#maxlength' => 200,
    '#description' => t('The URL of the Naturalis Data API, used for sending queries.') . '<br />' .
      t('Default') . ': ' . NDABIO_NDA,
    '#required' => TRUE,
  );
  $form['ndabio_config']['ndabio_config_json'] = array(
    '#type' => 'textfield',
    '#title' => t('NDA Get URL'),
    '#default_value' => variable_get('ndabio_config_json', NDABIO_JSON),
    '#size' => 140,
    '#maxlength' => 200,
    '#description' => t('The URL used for sending GET requests. Expects a JSON reply.') . '<br />' .
      t('Default') . ': ' . NDABIO_JSON,
    '#required' => TRUE,
  );
  $form['ndabio_config']['ndabio_config_jsonpost'] = array(
    '#type' => 'textfield',
    '#title' => t('NDA Post URL'),
    '#default_value' => variable_get('ndabio_config_jsonpost', NDABIO_JSONPOST),
    '#size' => 140,
    '#maxlength' => 200,
    '#description' => t('The URL used for sending POST requests. Expects a JSON reply.') . '<br />' .
      t('Default') . ': ' . NDABIO_JSONPOST,
    '#required' => TRUE,
  );
  $form['ndabio_gmap'] = array(
    '#type' => 'fieldset',
    '#title' => t('Naturalis Geosearch config')
  );
  $form['ndabio_gmap']['ndabio_config_gmapkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Google maps key'),
    '#default_value' => variable_get('ndabio_config_gmapkey', NDABIO_GMAPKEY),
    '#size' => 140,
    '#maxlength' => 200,
    '#description' => t('The key used by Google maps for a geographic search.') . '<br />' .
      t('Default') . ': ' . NDABIO_GMAPKEY,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 *
 */
function ndabio_displayform() {
  $form = drupal_get_form('ndabio_advanced_taxonomysearch');
  return (drupal_render($form));
}

/**
 *
 */
function _wrap_inner_grid_cols( &$form_element, $n = 6 ){
  if (!isset($form_element['#prefix']) ) $form_element['#prefix'] = '';
  if (!isset($form_element['#suffix']) ) $form_element['#prefix'] = '';
  $form_element['#prefix'] = $form_element['#suffix'] . "<div class='small-$n columns'>";
  $form_element['#suffix'] = "</div>" . $form_element['#suffix'];
}

/**
 * Implements hook_theme().
 */
function ndabio_theme($existing, $type, $theme, $path) {
  //Provide a theme function for the 'omnisearch' field
  $data['ndabio_omnisearch'] = array(
    'render element' => 'element',
  );
  return $data;
}

/**
 * Form validation logic
 */
function ndabio_ndasearchform_callback_validate($form, &$form_state) {
  //drupal_set_message("Naturalis: ndabio_ndasearchform_callback_validate");
}

/**
 * Execute search
 */
function ndabio_ndasearchform_callback_submit($form, &$form_state) {
  drupal_set_message("Naturalis: ndabio_ndasearchform_callback_submit");
  //Build search query
  $searchterms = "species=test"; // . $form['ndabio_advsearch']['ndabio_advsearch_species']['#value'] . ";" .
    //"taxon=" . $form['ndabio_advsearch']['ndabio_advsearch_taxon']['#value'] . ";" .
    //"c:" . $form['ndabio_adv']['#value'];
  //drupal_set_message($searchterms);
  return drupal_deliver_page(search_data($searchterms, "ndabio"));
}

/**
 *
 */
function ndabio_geosearch_callback() {
  global $base_root, $base_path;
  $path = drupal_get_path('module', 'ndabio');
  drupal_add_css($path . "/css/naturalis.css");
  drupal_add_js($path . "/js/map.js", array('weight' => 1));
  drupal_add_js("https://maps.googleapis.com/maps/api/js?key=" . variable_get('ndabio_config_gmapkey', NDABIO_GMAPKEY) . "&libraries=drawing");
  drupal_add_js("jQuery(document).ready(function() { google.maps.event.addDomListener(window, 'load', initialize); });", 'inline');
  drupal_add_js("jQuery(document).ready(function($) { $('.view-geographic-areas li').click(function() { plotMapArea(this.id.substr(4), '" . $base_path . "'); }); });", 'inline');

  $myform = ndabio_advanced_taxonomysearch();
  $myform['gmap'] = array(
    '#type' => 'gmap',
    '#map' => 'gmap',
    '#settings' => array(
      'zoom' => 1,
      'id' => 'gmapx',
      'behavior' => array(
        'geocode_leave_marker' => TRUE,
      ),
    ),
    '#prefix' => '<div id=\'banner-geographical-search\'>',
    '#suffix' => '<div id=\'map-canvas\'></div></div>',
  );
  $myform['gmap']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#attributes' => array(
      'onclick' => 'postShape();', 
      'onsubmit' => 'return false',
    ),
  ); 
  $pagecontent = drupal_render($myform);
  return $pagecontent;
}

/**
 * Check if a string is JOSN.
 * @param string
 * @return boolean
 */
function isJson($string) {
  json_decode($string);
  return (json_last_error() == JSON_ERROR_NONE);
}

/**
 * GEO data is passed to this page as an node id. The node contains all geo data, and should be posted to the NDA
 */
function ndabio_pass() {
  $path = drupal_get_path('module', 'ndabio');
  //drupal_add_js($path . "/js/naturalis.js", array('weight' => 1));
  $mynode = node_load($_GET['geometry']);
  $mycontent = "Selected map: " . $mynode->title . "<br />";
  $mycontent .= "Source: " . $mynode->field_source['und'][0]['value'] . "<br />";
  $mycontent .= "Type: " . $mynode->field_type['und'][0]['value'] . "<br />";
  $mycontent .= "JSON: " . substr($mynode->field_geojson['und'][0]['value'], 0, 100) . "... <br />";
  $keys = "geo=" . urlencode($mynode->field_geojson['und'][0]['value']);
  return $mycontent . ndabio_postjson($keys = '');
}

/**
 * Post a query to the NDA.
 */
function ndabio_postjson($keys = '') {
  $service_url = variable_get('ndabio_config_jsonpost', NDABIO_JSONPOST);
  drupal_set_message("POST:" . $service_url);

  $curl = curl_init($service_url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $keys);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array("Expect:"));
  $curl_response = curl_exec($curl);
  $http_status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
  curl_close($curl);
  if ($http_status >= 400) {
    drupal_set_message("Curl returned error: " .  $http_status);
    return " ";
  }
  if (!isJson($curl_response)) {
    drupal_set_message("Curl did not return json: " .  $curl_response);
    return " ";
  }
  return $curl_response;
}



/**
 * Get a JSON string.
 */
function ndabio_getjson($url = '') {
  $service_url = $url;
  drupal_set_message("GET:" . $service_url);

  $curl = curl_init($service_url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array("Expect:"));
  $curl_response = curl_exec($curl);
  $http_status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
  curl_close($curl);
  if ($http_status >= 400) {
    drupal_set_message("Curl returned error: " .  $http_status);
    return " ";
  }
  if (!isJson($curl_response)) {
    drupal_set_message("Curl did not return json: " .  $curl_response);
    return " ";
  }
  return $curl_response;
}

/**
 * DEFINE CUSTOM BLOCKS
 */

/**
 * Implements hook_block_info().
 */
function ndabio_block_info() {
 $blocks['ndabio_copyright_block'] = array(
  'info' => t('Naturalis: Copyright'),
  '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'naturalis') . '/css/naturalis.css',
      ),
      'js' => array(
      ),
    ),
  );
 $blocks['ndabio_search_block'] = array(
  'info' => t('Naturalis: Search'),
  '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'naturalis') . '/css/naturalis.css',
      ),
      'js' => array(
      ),
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ndabio_block_view($delta = '') {
  global $base_root, $base_path;
  $block = array();

  switch ($delta) {
    case 'ndabio_copyright_block':
      $block['content'] = t('Copyright') . ' ' . date("Y") . ' ' .
        '<a href="' . variable_get('ndabio_copyright_url', $base_root . $base_path) . '">' .
        variable_get('ndabio_copyright_label', 'Naturalis') . '</a>';
      break;
    case 'ndabio_search_block':
      $form = drupal_get_form('ndabio_ndasearchform_callback');
      $block['content'] = drupal_render($form);
      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function ndabio_block_configure($delta = '') {
  global $base_root, $base_path;
  $form = array();
  if ($delta == 'ndabio_copyright_block') {
    $form['ndabio_copyright_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Naturalis copyright URL'),
      '#size' => 80,
      '#description' => t('The URL where the copyright message is pointing to.' . '<br />' .
        t('Default') . ': ' . $base_root . $base_path),
      '#default_value' => variable_get('ndabio_copyright_url', $base_root . $base_path),
    );
    $form['ndabio_copyright_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Naturalis copyright label'),
      '#size' => 80,
      '#description' => t('The label of the copyright owner.' . '<br />' .
        t('Default') . ': ' . t('Naturalis')),
      '#default_value' => variable_get('ndabio_copyright_label', 'Naturalis'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function ndabio_block_save($delta = '', $edit = array()) {
  if ($delta == 'ndabio_copyright_block') {
    variable_set('ndabio_copyright_url', $edit['ndabio_copyright_url']);
    variable_set('ndabio_copyright_label', $edit['ndabio_copyright_label']);
  }
}

/**
 * DEFINE CRON JOB
 */

/**
 * Implements hook_cron().
 */
function ndabio_cron() {
  drupal_set_message("Naturalis: Run cron");
}

/**
 * DEFINE CUSTOM (BASIC) SEARCH
 */


/**
 * Implements hook_search_page().
 */
function ndabio_search_page($results) {
  //drupal_set_message("Naturalis: ndabio_search_page");

  $output['prefix']['#markup'] = '<h2>Search results ' . '</h2>' ;
  $output['prefix']['#markup'] .= '<ol class="search-results">';

  if(!empty($results)) {
    foreach ($results as $entry) {
      $output[] = array(
        '#theme' => 'search_result',
        '#result' => $entry,
        '#module' => 'naturalis',
      );
    }
  }
  $output['suffix']['#markup'] = '</ol>' . theme('pager');

  return $output;
}

/**
 * 'search' TAXONOMY TO ADVANCED SEARCH FORM
 */
function ndabio_advanced_taxonomysearch() {
  $searchtype = array(0 => t('And'), 1 => t('Or'));

  $machine_name = "search";
  $v = taxonomy_vocabulary_machine_name_load($machine_name);
  $terms = taxonomy_get_tree($v->vid, 0, 1, TRUE);

  $form = array();
  foreach($terms as $item) {
    $name = $item->name;
    $label = $item->description;
    $sysname = $item->name;
    if (!empty($item->field_ndasystem)) $sysname = $item->field_ndasystem['und'][0]['safe_value'];

    $children = taxonomy_get_children($item->tid, $item->vid);
    if ($children) {
      $form[$sysname] = array(
        '#type' => 'fieldset',
        '#id' => "edit-$sysname"
        //'#title' => $label,
      );

      foreach ($children as $child) {
        $childlabel = $child->description;
        $childsysname = $child->name;
        $fieldsetPrefix = strtolower(substr(end(explode(" ", $childsysname)), 0, 1));
        if (!empty($child->field_ndasystem)) $childsysname = $child->field_ndasystem['und'][0]['safe_value'];
        $subchildren = taxonomy_get_children($child->tid, $child->vid);
        if ($subchildren) {
          $form[$sysname][$childsysname] = array(
            '#type' => 'fieldset',
            '#title' => $childlabel,
            $fieldsetPrefix . '_andOr' => array(
              '#type' => 'radios',
              '#title' => t('Combine searchterms'),
              '#default_value' => 0,
              '#options' => $searchtype,
              '#inline' => TRUE
            ),
          );
          foreach ($subchildren as $subchild) {
            $subchildlabel = $subchild->description;
            $subchildsysname = $subchild->name;
            if (!empty($subchild->field_ndasystem)) $subchildsysname = $subchild->field_ndasystem['und'][0]['safe_value'];

            //Special category, hide or pulldown fields
            if (($subchild->name == "--more--") || ($subchild->name == "--hide--")) {
              //--more-- will be grouped in a new fieldset
              //--hide-- will be ignored (not added to the form)

              $category = taxonomy_get_children($subchild->tid, $subchild->vid);
              if ($category && ($subchild->name == "--more--")) {
                $form[$sysname][$childsysname][$subchildsysname][$subchild->name] = array(
                  '#type'            => 'fieldset',
                  '#title'           => t("More"),
                  '#collapsible'     => TRUE,
                  '#collapsed'       => TRUE,
                  '#attributes'    =>  array( 'collapsed' => "true", 'collapsible' => 'true', 'class' => array("collapsible","collapsed", "form-wrapper") )
                );

                //put all children in group
                foreach ($category as $catitem) {
                  $form[$sysname][$childsysname][$subchildsysname][$subchild->name][$catitem->name] = array(
                    '#type'          => 'textfield',
                    '#title'         => $catitem->description,
                    '#default_value' => '',
                    '#required'      =>  FALSE,
                    '#inline'        =>  TRUE,
                  );
                }
              }
            } else {
              //Default search fields
              $form[$sysname][$childsysname][$subchildsysname] = array(
                '#type'          => 'textfield',
                '#title'         => $subchildlabel,
                '#default_value' => '',
                '#required'      =>  FALSE,
                '#inline'        =>  TRUE,
                '#attributes'    =>  array( 'data-clear' => "" )
              );
            }
          }
        } else {
          //Default seartch fields
          $form[$sysname][$childsysname]['#type'] = array(
            '#type'          => 'textfield',
            '#title'         => $childlabel,
            '#default_value' => '',
            '#required'      =>  FALSE,
            '#inline'        =>  TRUE,
            '#attributes'    =>  array( 'data-clear' => "" )
          );
        }
      }
    } else {
      // Omnisearch Box
      $form[$sysname]['omnisearch'] = array(
        '#type' => 'fieldset',
        '#theme' => 'ndabio_omnisearch',
        '#nowrapper' => TRUE,
        '#attributes' => array( 'class' => array('fieldset-omnisearch'))
      );

      $form[$sysname]['omnisearch']['term'] = array(
        '#type' => 'textfield',
        '#title' => t('Keywords'),
        '#default_value' => '',
        '#required' => FALSE,
        '#title_display' => 'invisible',
        '#nowrapper' => TRUE,
        '#id' => "edit-term"
       );

      $form[$sysname]['omnisearch']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
        '#nowrapper' => TRUE,
        '#attributes' => array( 'class' => array('postfix')),
        '#id' => 'edit-submit-top'
      );
    }
  }
  $form[$sysname]['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#nowrapper' => TRUE,
    '#id' => 'edit-submit-bottom'
  );
  $form['#action'] = url('nba/result');

  return ($form);
}

/**
 *
 */
function ndabio_advanced_taxonomysearch_callback_submit(&$form, &$form_state) {
  $myvalues = array_diff($form_state['values'], array('form_build_id', 'form_token', 'form_id', 'op', 'submit'));
  unset($myvalues['form_build_id']);
  unset($myvalues['form_token']);
  unset($myvalues['form_id']);
  unset($myvalues['op']);
  unset($myvalues['submit']);

  $myurl = variable_get('ndabio_config_json', NDABIO_JSON) . "?";
  //Default search is AND based. Only add the operator if a non-default is chosen
  if ($myvalues['searchtype'] == 1) $myurl .= "operator=OR&";
  unset($myvalues['searchtype']);

  foreach (array_filter($myvalues) as $key => $val) {
    $myurl .= "$key=" . urlencode($val) . "&";
  }
  drupal_deliver_page("<h2>" . t("Results") . "</h2><pre>" . ndabio_getjson(rtrim($myurl, '&')) . "</pre>");
}
