<?php

/**
 * @file
 * Naturalis example module.
 */

/**
 * Defaults.
 */
define('NDABIO_NDA', 'http://nda.naturalis.nl');
define('NDABIO_GMAPKEY', 'AIzaSyCv168azSiPAf0wjVe36gNqdANDqEXkpvQ');
//define('NDABIO_JSON', 'http://10.42.1.121:8080/nl.naturalis.nda.service.rest/api/specimen/RMNH.MAM.50059');
//define('NDABIO_JSON', 'http://10.42.1.121:8080/nl.naturalis.nda.service.rest/api/specimen/search/?country=Suriname&sex=male');
define('NDABIO_JSON', 'http://10.42.1.121:8080/nl.naturalis.nda.service.rest/api/specimen/search/');

/**
* DEFINE CUSTOM PAGES
*/

/**
* Implements hook_menu().
*/
function ndabio_menu() {
  $items['admin/config/naturalis'] = array(
    'title' => 'Naturalis config',
    'description' => 'Configuration for Naturalis module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ndabio_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['naturalis'] = array(
    'page callback' => 'ndabio_naturalis_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['search/geosearch'] = array(
    'page callback' => 'ndabio_geosearch_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['naturalis/ndadetail'] = array(
    'title' => 'Details',
    'page callback' => 'ndabio_ndadetail_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
  );
  $items['search/advancednda'] = array(
    'page callback' => 'ndabio_displayform',
    'access arguments' => array('access content'),
    'title' => t('Advanced Naturalis Data Search'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['search/ndapass'] = array(
    'page callback' => 'ndabio_pass',
    'access arguments' => array('access content'),
    'title' => t('Passthrough'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
* Output overview page.
*/
function ndabio_naturalis_callback() {
  $page = "<a href='/search/species'>Search species</a><br />";
  $page .= "<a href='/search/other'>Search other</a><br />";
  $page .= "<a href='/specific/species'>Specific species</a><br />";
  $page .= "<a href='/specific/other'>Specific other</a><br />";
  $page .= "<a href='/detail/species'>Detail species</a><br />";
  $page .= "<a href='/detail/other'>Detail other</a><br />";
  $page .= "<a href='/download/species'>Download species</a><br />";
  $page .= "<a href='/download/other'>Download other</a><br />";
  return $page;
}


/**
* Output detail page.
*/
function ndabio_ndadetail_callback($myid = '', $myaction = NULL) {
  return "<h2>" . t("My ID") . "</h2><pre>" . $myid . " " . $myaction . "</pre>";
}


function ndabio_config_form($form, &$form_state) {
  $form['ndabio_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Naturalis Data API config')
  );
  $form['ndabio_config']['ndabio_config_nda'] = array(
    '#type' => 'textfield',
    '#title' => t('Naturalis Data API URL'),
    '#default_value' => variable_get('ndabio_config_nda', NDABIO_NDA),
    '#size' => 140,
    '#maxlength' => 200,
    '#description' => t('The URL of the Naturalis Data API, used for sending queries.') . '<br />' .
      t('Default') . ': ' . NDABIO_NDA,
    '#required' => TRUE,
  );
  $form['ndabio_config']['ndabio_config_json'] = array(
    '#type' => 'textfield',
    '#title' => t('JSONP Url'),
    '#default_value' => variable_get('ndabio_config_json', NDABIO_JSON),
    '#size' => 140,
    '#maxlength' => 200,
    '#description' => t('The URL used for getting JSON data.') . '<br />' .
      t('Default') . ': ' . NDABIO_JSON,
    '#required' => TRUE,
  );
  $form['ndabio_gmap'] = array(
    '#type' => 'fieldset',
    '#title' => t('Naturalis Geosearch config')
  );
  $form['ndabio_gmap']['ndabio_gmapkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Google maps key'),
    '#default_value' => variable_get('ndabio_gmapkey', NDABIO_GMAPKEY),
    '#size' => 140,
    '#maxlength' => 200,
    '#description' => t('The key used by Google maps for a geographic search.') . '<br />' .
      t('Default') . ': ' . NDABIO_GMAPKEY,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function ndabio_displayform() {
	$form = drupal_get_form('ndabio_advanced_taxonomysearch');
	return (drupal_render($form));
//	dpm (($form));


//  $form = drupal_get_form('ndabio_ndasearchform_callback');
//  return drupal_render($form);
}



function _wrap_inner_grid_cols( &$form_element, $n = 6 ){
  if ( !isset( $form_element['#prefix'])  ){$form_element['#prefix'] = ''; }
  if ( !isset( $form_element['#suffix'])  ){$form_element['#prefix'] = ''; }
  $form_element['#prefix'] = $form_element['#suffix']."<div class='small-$n columns'>";
  $form_element['#suffix'] =                          "</div>".$form_element['#suffix'];
}

/**
* Implements hook_theme().
*/
// Provide a theme function for the 'omnisearch' field
function ndabio_theme($existing, $type, $theme, $path) {
  $data['ndabio_omnisearch'] = array(
    'render element' => 'element',
  );
  return $data;
}

/**
* Form validation logic
*/
function ndabio_ndasearchform_callback_validate($form, &$form_state) {
  //drupal_set_message("Naturalis: ndabio_ndasearchform_callback_validate");
}

/**
* Execute search
*/
function ndabio_ndasearchform_callback_submit($form, &$form_state) {
  //drupal_set_message("Naturalis: ndabio_ndasearchform_callback_submit");
  //Build search query
  $searchterms = "species=test"; // . $form['ndabio_advsearch']['ndabio_advsearch_species']['#value'] . ";" .
    //"taxon=" . $form['ndabio_advsearch']['ndabio_advsearch_taxon']['#value'] . ";" .
    //"c:" . $form['ndabio_adv']['#value'];
  //drupal_set_message($searchterms);
  return drupal_deliver_page(search_data($searchterms, "ndabio"));
}

/**
*
*/
function ndabio_geosearch_callback() {
  global $base_root, $base_path;
  $path = drupal_get_path('module', 'ndabio');
  drupal_add_css($path . "/css/naturalis.css");
  drupal_add_js($path . "/js/map.js", array('weight' => 1));
  drupal_add_js("https://maps.googleapis.com/maps/api/js?key=" . variable_get('ndabio_gmapkey', NDABIO_GMAPKEY) . "&libraries=drawing");
  drupal_add_js("jQuery(document).ready(function() { google.maps.event.addDomListener(window, 'load', initialize); });", 'inline');
  drupal_add_js("jQuery(document).ready(function($) { $('.view-geographic-areas li').click(function() { plotMapArea(this.id.substr(4)); }); });", 'inline');

  $pagecontent = "<div id='map-canvas'></div><div id='areas'>
	<form name='geoform' action='/search/ndapass' method='get'>
    <button onclick='postShape();'>Post geometry</button>
	  <input name='geometry' id='geometry' type='hidden' value='0' />
	  <input type='submit' value='Zoeken' />
	</form></div>";


  return $pagecontent;
}

/**
* Check if a string is JOSN.
*/
function isJson($string) {
 json_decode($string);
 return (json_last_error() == JSON_ERROR_NONE);
}

function ndabio_pass() {
  $path = drupal_get_path('module', 'ndabio');
//  drupal_add_js($path . "/js/naturalis.js", array('weight' => 1));
  $mynode = node_load($_GET['geometry']);
  $mycontent = "Selected map: " . $mynode->title . "<br />";
  $mycontent .= "Source: " . $mynode->field_source['und'][0]['value'] . "<br />";
  $mycontent .= "Type: " . $mynode->field_type['und'][0]['value'] . "<br />";
  $mycontent .= "JSON: " . substr($mynode->field_geojson['und'][0]['value'], 0, 100) . "... <br />";

  return $mycontent;
}


/**
* Get a JOSN string.
*/
function ndabio_getjson($keys = '') {
  $service_url = variable_get('ndabio_config_json', NDABIO_JSON) .$keys;
  //dpm($service_url);
  $curl = curl_init($service_url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array("Expect:"));
  $curl_response = curl_exec($curl);
  $http_status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
  curl_close($curl);
  if ($http_status >= 400) {
    drupal_set_message("Curl returned error: " .  $http_status);
    return " ";
  }
  if (!isJson($curl_response)) {
    drupal_set_message("Curl did not return json: " .  $curl_response);
    return " ";
  }
  return $curl_response;
}

/**
* DEFINE CUSTOM BLOCKS
*/

/**
* Implements hook_block_info().
*/
function ndabio_block_info() {
 $blocks['ndabio_copyright_block'] = array(
  'info' => t('Naturalis: Copyright'),
  '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'naturalis') . '/css/naturalis.css',
      ),
      'js' => array(
      ),
    ),
  );
 $blocks['ndabio_search_block'] = array(
  'info' => t('Naturalis: Search'),
  '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'naturalis') . '/css/naturalis.css',
      ),
      'js' => array(
      ),
    ),
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function ndabio_block_view($delta = '') {
  global $base_root, $base_path;
  $block = array();

  switch ($delta) {
    case 'ndabio_copyright_block':
      $block['content'] = t('Copyright') . ' ' . date("Y") . ' ' .
        '<a href="' . variable_get('ndabio_copyright_url', $base_root . $base_path) . '">' .
        variable_get('ndabio_copyright_label', 'Naturalis') . '</a>';
      break;
    case 'ndabio_search_block':
      $form = drupal_get_form('ndabio_ndasearchform_callback');
      $block['content'] = drupal_render($form);
      break;
  }

  return $block;
}

/**
* Implements hook_block_configure().
*/
function ndabio_block_configure($delta = '') {
  global $base_root, $base_path;
  $form = array();
  if ($delta == 'ndabio_copyright_block') {
    $form['ndabio_copyright_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Naturalis copyright URL'),
      '#size' => 80,
      '#description' => t('The URL where the copyright message is pointing to.' . '<br />' .
        t('Default') . ': ' . $base_root . $base_path),
      '#default_value' => variable_get('ndabio_copyright_url', $base_root . $base_path),
    );
    $form['ndabio_copyright_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Naturalis copyright label'),
      '#size' => 80,
      '#description' => t('The label of the copyright owner.' . '<br />' .
        t('Default') . ': ' . t('Naturalis')),
      '#default_value' => variable_get('ndabio_copyright_label', 'Naturalis'),
    );
  }
  return $form;
}

/**
* Implements hook_block_save().
*/
function ndabio_block_save($delta = '', $edit = array()) {
  if ($delta == 'ndabio_copyright_block') {
    variable_set('ndabio_copyright_url', $edit['ndabio_copyright_url']);
    variable_set('ndabio_copyright_label', $edit['ndabio_copyright_label']);
  }
}

/**
* DEFINE CRON JOB
*/

/**
 * Implements hook_cron().
 */
function ndabio_cron() {
  drupal_set_message("Naturalis: Run cron");
}

/**
* DEFINE CUSTOM (BASIC) SEARCH
*/


/**
* Implements hook_search_page().
*/
function ndabio_search_page($results) {
  //drupal_set_message("Naturalis: ndabio_search_page");

  $output['prefix']['#markup'] = '<h2>Search results ' . '</h2>' ;
  $output['prefix']['#markup'] .= '<ol class="search-results">';

  if(!empty($results)) {
    foreach ($results as $entry) {
      $output[] = array(
        '#theme' => 'search_result',
        '#result' => $entry,
        '#module' => 'naturalis',
      );
    }
  }
  $output['suffix']['#markup'] = '</ol>' . theme('pager');

  return $output;
}

/**
* 'search' TAXONOMY TO ADVANCED SEARCH FORM
*/
function ndabio_advanced_taxonomysearch() {
  $searchtype = array(0 => t('And'), 1 => t('Or'));

  $machine_name = "search";
  $v = taxonomy_vocabulary_machine_name_load($machine_name);
  $terms = taxonomy_get_tree($v->vid, 0, 1, TRUE);

  $form = array();
  foreach($terms as $item) {
    $name = $item->name;
    $label = $item->description;
    $sysname = $item->name;
    if (!empty($item->field_system)) $sysname = $item->field_system['und'][0]['safe_value'];

    $children = taxonomy_get_children($item->tid, $item->vid);
    if ($children) {
      $form[$sysname] = array(
        '#type' => 'fieldset',
        '#title' => $label,
        // '#collapsible' => TRUE,
        // '#collapsed' => TRUE
        );

      foreach ($children as $child) {
        $childlabel = $child->description;
        $childsysname = $child->name;
        if (!empty($child->field_system)) $childsysname = $child->field_system['und'][0]['safe_value'];
        $subchildren = taxonomy_get_children($child->tid, $child->vid);
        if ($subchildren) {
          $form[$sysname][$childsysname] = array(
            '#type' => 'fieldset',
            '#title' => 't '.$childlabel,
            // '#collapsible' => TRUE,
            'searchtype' => array( '#type' => 'radios', '#title' => t('Combine searchterms'), '#default_value' => 0, '#options' => $searchtype),
          );
          foreach ($subchildren as $subchild) {
            $subchildlabel = $subchild->description;
            $subchildsysname = $subchild->name;
            if (!empty($subchild->field_system)) $subchildsysname = $subchild->field_system['und'][0]['safe_value'];
            //Special category, hide or pulldown fields
            if (($subchild->name == "--more--") || ($subchild->name == "--hide--")) {
              //--more-- will be grouped in a new fieldset
              //--hide-- will be ignored (not added to the form)
              $category = taxonomy_get_children($subchild->tid, $subchild->vid);
              if ($category && ($subchild->name == "--more--")) {
                $form[$sysname][$childsysname][$subchildsysname][$subchild->name] = array(
                  '#type' => 'fieldset',
                  '#title' => t("More"),
                  // '#collapsible' => TRUE,
                  // '#collapsed' => TRUE,
                  // '#prefix' => "<div id='ndabio-advanced-search'>\n",
                  // '#suffix' => "\n</div> <!-- / #ndabio-advanced-search -->",
                );

                //put all children in group
                foreach ($category as $catitem) {
                  $form[$sysname][$childsysname][$subchildsysname][$subchild->name][$catitem->name]['#type'] = 'textfield';
                  $form[$sysname][$childsysname][$subchildsysname][$subchild->name][$catitem->name]['#title'] = 't '.$catitem->description;
                  $form[$sysname][$childsysname][$subchildsysname][$subchild->name][$catitem->name]['#default_value'] = '';
                  $form[$sysname][$childsysname][$subchildsysname][$subchild->name][$catitem->name]['#required'] =  FALSE;
                  $form[$sysname][$childsysname][$subchildsysname][$subchild->name][$catitem->name]['#inline'] =  TRUE;
                }
              }
            } else {
              //Default search fields
              $form[$sysname][$childsysname][$subchildsysname]['#type'] = 'textfield';
              $form[$sysname][$childsysname][$subchildsysname]['#title'] = 't '.$subchildlabel;
              $form[$sysname][$childsysname][$subchildsysname]['#default_value'] = '';
              $form[$sysname][$childsysname][$subchildsysname]['#required'] =  FALSE;
              $form[$sysname][$childsysname][$subchildsysname]['#inline'] =  TRUE;
            }
          }
        } else {
          //Default seartch fields
          $form[$sysname][$childsysname]['#type'] = 'textfield';
          $form[$sysname][$childsysname]['#title'] = 't '. $childlabel;
          $form[$sysname][$childsysname]['#default_value'] = '';
          $form[$sysname][$childsysname]['#required'] =  FALSE;
          $form[$sysname][$childsysname]['#inline'] =  TRUE;
        }
        //Search button under the fieldset
        //$form[$sysname][$childsysname]['submit'] = array('#type' => 'submit', '#value' => t('Search'), '#nowrapper' => TRUE, '#attributes' => array( 'class' => array('postfix')) );
      }
    } else {
      // Omnisearch Box
      $form[$sysname]['omnisearch'] = array(
        '#type' => 'fieldset',
        '#theme' => 'ndabio_omnisearch',
        '#nowrapper' => TRUE,
        '#attributes' => array( 'class' => array('fieldset-omnisearch'))
      );

      $form[$sysname]['omnisearch']['ndabio_adv'] = array(
        '#type' => 'textfield',
        '#title' => t('Keywords'),
        '#default_value' => '',
        '#required' => FALSE,
        '#title_display' => 'invisible',
        '#nowrapper' => TRUE
       );

      $form[$sysname]['omnisearch']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
        '#nowrapper' => TRUE,
        '#attributes' => array( 'class' => array('postfix'))
      );
    }
  }
  $form['#submit'][] = 'ndabio_advanced_taxonomysearch_callback_submit';
  return ($form);
}

function ndabio_advanced_taxonomysearch_callback_submit(&$form, &$form_state) {
  $myvalues = array_diff($form_state['values'], array('form_build_id', 'form_token', 'form_id', 'op', 'submit'));
  unset($myvalues['form_build_id']);
  unset($myvalues['form_token']);
  unset($myvalues['form_id']);
  unset($myvalues['op']);
  unset($myvalues['submit']);

//  dpm($myvalues);
  $myurl = "?";
  //Default search is AND based. Only add the operator if a non-deault is chosen
  if ($myvalues['searchtype'] == 1) $myurl .= "operator=OR&";
  unset($myvalues['searchtype']);

  foreach (array_filter($myvalues) as $key => $val) {
    $myurl .= "$key=" . urlencode($val) . "&";
  }
  drupal_set_message(rtrim($myurl, '&'));
  drupal_deliver_page("<h2>" . t("Results") . "</h2><pre>" . ndabio_getjson(rtrim($myurl, '&')) . "</pre>");
}
