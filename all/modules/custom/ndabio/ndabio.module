<?php
// Load shared library
require_once DRUPAL_ROOT . '/sites/all/modules/custom/ndabioresults/common.inc';

// Namespaces not defined in common.inc
use nl\naturalis\bioportal\QuerySpec as QuerySpec;
use nl\naturalis\bioportal\Condition as Condition;


function nbaMinLikeStringSize () {
    $nbaMinLikeStringSize = &drupal_static(__FUNCTION__);
    if (!$nbaMinLikeStringSize) {
        $cacheId = 'nbaMinLikeStringSize';
        $cache = cache_get($cacheId, 'cache');
        if ($cache && !empty($cache->data)) {
            $nbaMinLikeStringSize = $cache->data;
            return $nbaMinLikeStringSize;
        }
        $client = _initBioPortalClient();
        $nbaMinLikeStringSize = $client->getOperatorLikeMinTermLength();
        cache_set($cacheId, $nbaMinLikeStringSize);
    }
    return $nbaMinLikeStringSize;
}

function nbaMaxLikeStringSize () {
    $nbaMaxLikeStringSize = &drupal_static(__FUNCTION__);
    if (!$nbaMaxLikeStringSize) {
        $cacheId = 'nbaMaxLikeStringSize';
        $cache = cache_get($cacheId, 'cache');
        if ($cache && !empty($cache->data)) {
            $nbaMaxLikeStringSize = $cache->data;
            return $nbaMaxLikeStringSize;
        }
        $client = _initBioPortalClient();
        $nbaMaxLikeStringSize = $client->getOperatorLikeMaxTermLength();
        cache_set($cacheId, $nbaMaxLikeStringSize);
    }
    return $nbaMaxLikeStringSize;
}




function nbaGeoAreas () {
    $nbaGeoAreas = &drupal_static(__FUNCTION__);
    if (!$nbaGeoAreas) {
        $cacheId = 'nbaGeoAreas';
        $cache = cache_get($cacheId, 'cache');
        if ($cache && !empty($cache->data)) {
            $nbaGeoAreas = $cache->data;
            return $nbaGeoAreas;
        }
        $client = _initBioPortalClient();
        $nbaGeoAreas = $client->getGeoAreas(true);
        cache_set($cacheId, $nbaGeoAreas);
    }
    return $nbaGeoAreas;
}

function advancedSelects () {
    $nbaAdvancedSelects = &drupal_static(__FUNCTION__);
    if (!$nbaAdvancedSelects) {
        $cacheId = 'nbaAdvancedSelects';
        $cache = cache_get($cacheId, 'cache');
        if ($cache && !empty($cache->data)) {
            $nbaAdvancedSelects = $cache->data;
            return $nbaAdvancedSelects;
        }
        $nbaAdvancedSelects['s_sourceSystem'] =
        	_createAdvancedSelect('specimen', 'sourceSystem.code', 'sourceSystem.name');
        $nbaAdvancedSelects['s_collectionType'] =
        	_setArrayKeyFromValue(_getDistinctValues('specimen', 'collectionType'));
        $nbaAdvancedSelects['s_typeStatus'] =
        	_setArrayKeyFromValue(_getDistinctValues('specimen', 'identifications.typeStatus'));
        $nbaAdvancedSelects['s_kindOfUnit'] =
        	_setArrayKeyFromValue(_kindOfUnitSelectValues());
        $nbaAdvancedSelects['s_sex'] =
        	_setArrayKeyFromValue(_getDistinctValues('specimen', 'sex'));
        $nbaAdvancedSelects['s_phaseOrStage'] =
        	_setArrayKeyFromValue(_getDistinctValues('specimen', 'phaseOrStage'));
        $nbaAdvancedSelects['s_kingdom'] =
        	_setArrayKeyFromValue(_getDistinctValues('specimen', 'identifications.defaultClassification.kingdom'));
        $nbaAdvancedSelects['t_sourceSystem'] =
        	//_setArrayKeyFromValue(_getDistinctValues('taxon', 'sourceSystem.name'));
        	_createAdvancedSelect('taxon', 'sourceSystem.code', 'sourceSystem.name');
        $nbaAdvancedSelects['t_kingdom'] =
        	_setArrayKeyFromValue(_getDistinctValues('taxon', 'defaultClassification.kingdom'));
        $nbaAdvancedSelects['m_sourceSystem'] =
        	//_setArrayKeyFromValue(_getDistinctValues('multimedia', 'sourceSystem.name'));
        	_createAdvancedSelect('multimedia', 'sourceSystem.code', 'sourceSystem.name');
        $nbaAdvancedSelects['m_collectionType'] =
        	_setArrayKeyFromValue(_getDistinctValues('multimedia', 'collectionType'));
        $nbaAdvancedSelects['m_typeStatus'] =
        	_setArrayKeyFromValue(_getDistinctValues('multimedia', 'identifications.typeStatus'));
        $nbaAdvancedSelects['m_phaseOrStage'] =
        	_setArrayKeyFromValue(_getDistinctValues('multimedia', 'phasesOrStages'));
        $nbaAdvancedSelects['m_sex'] =
        	_setArrayKeyFromValue(_getDistinctValues('multimedia', 'sexes'));
        $nbaAdvancedSelects['m_kingdom'] =
        	_setArrayKeyFromValue(_getDistinctValues('multimedia', 'identifications.defaultClassification.kingdom'));
        $nbaAdvancedSelects['m_license'] =
        	_setArrayKeyFromValue(_getDistinctValues('multimedia', 'license'));
    }
    return $nbaAdvancedSelects;
}

function _kindOfUnitSelectValues () {
	return array_merge(
		_getDistinctValues('specimen', 'kindOfUnit'),
		_getDistinctValues('specimen', 'recordBasis')	
	);
}


// Used to determine operator for advanced search
function _isAdvancedSelect ($field) {
	return in_array($field, [
        'sourceSystem', 
		'collectionType',
		'typeStatus',
		'sex',
		'phaseOrStage',
		'kingdom',
		'kindOfUnit',
		'license'
	]);
}


/*
 * Cannot use _getDistinctValues for select with different option-value pairs
 * (specifically sourceSystem, where option should be different from value)
 * Both fields should be linked of course!
  */
function _createAdvancedSelect ($service, $optionPath, $valuePath) {
	$options = _getDistinctValues($service, $optionPath);
	$client = _initBioPortalClient();
	foreach ($options as $option) {
		$condition = new Condition($optionPath, 'EQUALS', $option);
		$query = new QuerySpec();
		$query->addCondition($condition)->setSize(1);
		$data = json_decode($client->{$service}()->setQuerySpec($query)->query());
		// Convert NBA path to object path
		$pathArray = explode('.', $valuePath);
		if (isset($data->resultSet[0]->item)) {
			$objPath = $data->resultSet[0]->item;
			foreach ($pathArray as $deeper) {
				$objPath = $objPath->{$deeper};
			}
			$output[$option] = $objPath;
		}
	}
	return isset($output) ? $output : [];
}

/* Must be used to correctly format NBA gid */
function _setNbaGid ($gid = false) {
	if (!$gid) {
		return false;
	}
	$gid = str_replace('gid_', '', $gid);
	return strpos($gid, '@') === false ? $gid . '@GEO' : $gid;
}


function _getAdvancedFieldOperator ($field) {
	if (isset(advancedSelects()[$field])) {
		return 'EQUALS_IC';
	}
	$tmp = explode('_', $field);
	$field = $tmp[1];
	$service = 'specimen';
	if ($tmp[0] == 'm') {
		$service = 'specimen';
	} else if ($tmp[0] == 't') {
		$service = 'taxon';
	}
	if (isset(nbaAdvancedSearchExceptions()[$service][$field])) {
		return nbaAdvancedSearchExceptions()[$service][$field]['operator'];
	}
	return 'STARTS_WITH_IC';
}

function _getAdvancedFieldSplitInfo ($field) {
	$tmp = explode('_', $field);
	$field = $tmp[1];
	$service = 'specimen';
	if ($tmp[0] == 'm') {
		$service = 'multimedia';
	} else if ($tmp[0] == 't') {
		$service = 'taxon';
	}
	if (isset(nbaAdvancedSearchExceptions()[$service][$field])) {
		return var_export(nbaAdvancedSearchExceptions()[$service][$field]['split'], true);
	}
	return 'false';
}

function _setHelpText ($field, $description, $label) {
	$output = t('The term') . ' ';
	switch (_getAdvancedFieldSplitInfo($field)) {
		case 'true':
			$output .= t('is split into words first');
			break;
		case 'false':
			$output .= t('is used as is (not split up)');
			break;
	}
	$output .= ' '. t('and the field') . ' "' . strtolower($label) . '" ';
	switch (_getAdvancedFieldOperator($field)) {
		case 'EQUALS':
		case 'EQUALS_IC':
			$output .= t('matches the term extactly');
			break;
		case 'STARTS_WITH':
		case 'STARTS_WITH_IC':
			$output .= t('starts with the term');
			break;
		case 'MATCHES':
			$output .= t('matches the term');
			break;
		case 'LIKE':
		case 'CONTAINS':
			$output .= t('contains the term');
			break;
	}
	return $output .= '.';
}


/*
 * $field = name of form field
 * $taxonomy = Drupal values for taxonomy (old situation): indicates if --all-- option should be printed
 * $selected = option that should be select in form
 */
function _setAdvancedSelect ($field, $taxonomy = '') {
    if (!isset(advancedSelects()[$field])) {
        return false;
    }
    // First entry is an empty string
    $select[""] = "";
    // Add --all-- option if this is set in taxonomy value
    if (strpos($taxonomy, '-- all --') !== false) {
        $select['NOT_NULL'] = '-- ' . t('all') . ' --';
    }
    foreach (advancedSelects()[$field] as $option => $value) {
    	$select[$option] = $value;
    }
    return $select;
}



/**
 * @file
 * Naturalis bioportal module used to integrate Drupal with the Naturalis Data API formally
 * known as the NDA.
 * @version 0.1
 * @author Naturalis
 * @package Bioportal
 */

/**
 * Default value for the GMAP key. Can be overridden in the module config page.
 * <siteroot>/admin/config/naturalis
 */
define('NDABIO_GMAPKEY', 'AIzaSyCv168azSiPAf0wjVe36gNqdANDqEXkpvQ');


/**
 * DEFINE CUSTOM PAGES
 * Module administration and all custom pages. Each page includes a callback where the
 * page functionality is defined.
 * @package custompages
 */

/**
 *
 **/
function ndabio_boot() {
  global $language;
  //Execute on every page, check langauge env.
  $langs = language_list(); // Note: No argument
  if (isset($_GET["language"])) {
    $langcode = $_GET["language"];
    variable_set('language_default', $langs[$langcode]);
    $_SESSION["currentlanguage"] = $langcode;
  }
  elseif (isset($_SESSION["currentlanguage"])) {
    $langcode = $_SESSION["currentlanguage"];
    if (isset($langs[$langcode])) variable_set('language_default', $langs[$langcode]);
  }
  else {
    $language = $langs['nl'];
  }
}


/**
 * Implements hook_menu().
 */
function ndabio_menu() {
  $urlAlias = drupal_lookup_path('alias',"nl/help");
  if($urlAlias == '' ) {
    $path1['alias'] = "nl/help";
    $path1['source'] = "node/2";
    path_save($path1);
    $nlpath['alias'] = "nl/help";
    $nlpath['source'] = "node/2";
    $nlpath['language'] = "nl";
    path_save($nlpath);
    $path2['alias'] = "en/help";
    $path2['source'] = "node/3765";
    path_save($path2);
    $enpath['alias'] = "en/help";
    $enpath['source'] = "node/3765";
    $enpath['language'] = "en";
    path_save($enpath);
  }

  //Configuration page
  $items['admin/config/naturalis/ndabio'] = array(
    'title' => 'NDABIO GMap config',
    'description' => 'Configuration for Naturalis module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ndabio_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['search/geosearch'] = array(
    'page callback' => 'ndabio_displayform',
    'page arguments' => array('geo'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['geographic-search'] = array(
    'page callback' => 'ndabio_displayform',
    'page arguments' => array('geo'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['explore/%'] = array(
    'page callback' => 'ndabio_searchthematic',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //Currently used as front page
  $items['search/advancednda'] = array(
    'page callback' => 'ndabio_displayform',
    'access arguments' => array('access content'),
    'title' => 'Advanced Naturalis Data Search',
    'type' => MENU_LOCAL_TASK,
  );

  /*
   * Page used by javascript to retrieve geo coordinates based on a nid.
   */
  $items['naturalis/ajax'] = array(
   'page callback' => 'ndabio_ajax_callback',
   'access arguments' => array('access content'),
   'type' => MENU_CALLBACK,
  );

  $items['naturalis/clear_map_data'] = array(
   'page callback' => 'ndabio_clear_map_data_callback',
   'access arguments' => array('access content'),
   'type' => MENU_CALLBACK,
  );

  $items['new_areas'] = array(
    'page callback' => 'nda_areas_callback',
    'access callback' => TRUE,
  );


  return $items;
}



function nda_areas_callback ($type = false) {
    if (!$type) {
        return false;
    }
    $language = isset($_GET['language']) ? $_GET['language'] : 'en';
    if ($type == 'country') {
        // First print favourites (hard-coded)
        $f['en'] = ['Curaçao', 'Indonesia', 'Netherlands', 'Saint Martin', 'Suriname'];
        $f['nl'] = ['Curaçao', 'Indonesië', 'Nederland', 'Sint Maarten', 'Suriname'];
        echo _printGeoFavourites(_createGeoList('Country', $language, $f));
        // Complete list
        echo _printGeoList(_createGeoList('Country', $language));
    } else if ($type == 'municipality') {
        // Fix names that do not start with a letter
        $fixes = [
            "'s-Gravenhage" => 'Den Haag',
            "'s-Hertogenbosch" => 'Den Bosch',
        ];
        echo _printGeoList(_fixGeoList(_createGeoList('Municipality', $language), $fixes));
    } else {
        echo _printGeoList(_createGeoList(ucfirst($type), $language));
    }
}

function _createGeoList ($type, $language, $intersect = false) {
    $all = json_decode(nbaGeoAreas(), true);
    if (!isset($all[$type])) {
        return [];
    }
    $list = $all[$type];
    foreach ($list as $item) {
        $d[$item['id']] = isset($item['locality'][$language]) ?
        	$item['locality'][$language] : $item['locality']['en'];
    }
    if ($intersect && is_array($intersect)) {
        $d = array_intersect($d, $intersect[$language]);
    }
    asort($d);
    return $d;
}

function _fixGeoList ($list, $fixes = []) {
    if (empty($fixes)) {
        return $list;
    }
    foreach ($list as $id => $item) {
        if (isset($fixes[$item])) {
            $list[$id] = $fixes[$item];
        }
    }
    asort($list);
    return $list;
}

function _printGeoFavourites ($list) {
    $output = "<div class=\"item-list\">\n<h3>" . t('Highlighted') . "</h3>\n<ul>\n";
    foreach ($list as $id => $item) {
        $output .= '<li class="row-area"><a id="gid_' . $id . '">' . $item . "</a></li>\n";
    }
    return $output .= "</ul></div>\n";
}

function _printGeoList ($list) {
    $output = $letter = $prevLetter = '';
    foreach ($list as $id => $item) {
        $letter = strtoupper($item[0]);
        if ($letter != $prevLetter) {
            if ($prevLetter != '') {
                $output .= "</ul>\n</div>\n";
            }
            $output .= "<div class=\"item-list\">\n<h3>$letter</h3>\n<ul>\n";
        }
        $output .= '<li class="row-area"><a id="gid_' . $id . '">' . $item . "</a></li>\n";
        $prevLetter = $letter;
    }
    return $output .= "</ul></div>\n";
}


/**
 * Implements hook_block_info().
 */
function ndabio_block_info() {
  $blocks['ndabio_languageselect'] = array(
    'info' => t('NBA: Language select'),
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'region' => 'sidebar_first',
    'status' => FALSE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ndabio_block_view($delta = '') {
  global $base_url, $base_root, $base_path;
  global $language;

  $block = array();
  switch ($delta) {
        case 'ndabio_languageselect':

            if (arg(0) == 'node' && is_numeric(arg(1))) {
                $translations = translation_path_get_translations("node/" . arg(1));
                $currentpathnl = $base_url . "/" . drupal_get_path_alias($translations["nl"]) . "?";
                $currentpathen = $base_url . "/" . drupal_get_path_alias($translations["en"]) . "?";
            } else {
                $currentpath = request_uri();
                $cleanup = array(
                    "&language=en",
                    "&language=nl",
                    "?language=en",
                    "?language=nl",
                    "&searchagain=1",
                    "?searchagain=1",
                    "&back",
                    "?back"
                );
                $currentpath = str_replace($cleanup, "", $currentpath);
                if (strpos($currentpath, "?") === FALSE) {
                    $currentpath = $currentpath . "?";
                }
                else {
                    $currentpath = $currentpath . "&";
                }
                $currentpathnl = $currentpathen = $currentpath;
            }

            $block['content'] = "<ul class='right' id='language-menu'>";
            if ($language->language == "en") {
                $block['content'] .= "  <li class='active'>";
            } else {
                $block['content'] .= "  <li>";
            }
            if (strpos($currentpathen, "nba_request") === FALSE) {
                $block['content'] .= "    <a href='" . $currentpathen . "language=en&back' title>EN</a>";
            } else {
                $block['content'] .= "    <a href='" . $currentpathen . "language=en' title>EN</a>";
            }
            $block['content'] .= "  </li>";

            if ($language->language == "nl") {
                $block['content'] .= "  <li class='active'>";
            } else {
                $block['content'] .= "  <li>";
            }
            if (strpos($currentpathnl, "nba_request") === FALSE) {
                $block['content'] .= "    <a href='" . $currentpathnl . "language=nl&back' title>NL</a>";
            } else {
                $block['content'] .= "    <a href='" . $currentpathnl . "language=nl' title>NL</a>";
            }
            $block['content'] .= "  </li>";
            $block['content'] .= "</ul>";

            break;
    }
    return $block;
}



function ndabio_searchthematic($var1, $stitle = "") {
  drupal_set_message("Thematic search");
  session_unset();
  $_POST['searchtype'] = 'thematicsearch';
  $_POST['searchkey'] = $var1;
  $_POST['form_id'] = 'ndabio_advanced_taxonomysearch';
  //$_POST['term'] = $var1;
  $_POST['s_theme'] = $var1;
  $_POST['m_theme'] = $var1;

  return ndabioresults_pass();
}

function ndabio_clear_map_data_callback() {
    $_SESSION['nbaSearch']['geoShape'] = false;
    $_SESSION['nbaSearch']['location'] = false;
    $_SESSION['nbaSearch']['gid'] = false;
    $_SESSION['nbaSearch']['zoomLevel'] = false;
    $_SESSION['nbaSearch']['category'] = false;
    $_SESSION['nbaSearch']['mapCenter'] = false;
    die('Session data cleared');
}

/**
* Output a json formatted detail page with geo coordinates based on the nid passed in the url.
* The resulting page is used as input for the map, so no additional Drupal processing should take place.
* To avoid additional Drupal theming being applied the function ends with a die()

function ndabio_ajax_callback() {
  if (!empty($_GET["nid"])) {
    $geonode = intval($_GET["nid"]);
    $sql = "SELECT n.nid, n.title, g.field_geojson_value, s.field_source_value, t.field_type_value FROM {node} n , {field_data_field_geojson} g, {field_data_field_source} s, {field_data_field_type} t WHERE n.nid = $geonode AND n.nid = t.entity_id AND n.nid = g.entity_id AND n.nid = t.entity_id";
    $row = db_query($sql)->fetchObject();
    if ($row) {
    //Display data in json format
      echo '{"nid":' . $geonode . ',"locality":' . json_encode($row->title) . ',"source":' . json_encode($row->field_source_value) . ',"geometry":' . $row->field_geojson_value . '}';
    }
    die(); //die() is required to avoid displaying the entire drupal interface
  }
}
*/


/**
* Output a json formatted detail page with geo coordinates based on the nid passed in the url.
* The resulting page is used as input for the map, so no additional Drupal processing should take place.
* To avoid additional Drupal theming being applied the function ends with a die()
*/
function ndabio_ajax_callback() {
  if (!empty($_GET["nid"])) {
    $nid = $_GET["nid"];
    $language = isset($_GET["language"]) ? $_GET["language"] : 'en';
    $client = _initBioPortalClient();
    $geo = json_decode($client->geo()->find(_setNbaGid($nid)));
    if (isset($geo->shape)) {
        // locality is sometimes empty in Dutch;
        $locality = $geo->locality;
        if ($language == 'nl' && $geo->areaType == 'Country' &&
            !empty($geo->countryNL) && $geo->countryNL != '\N') {
            $locality = $geo->countryNL;
        }
        echo json_encode([
            'nid' => $nid,
            'locality' => $locality,
            'source' => $geo->source,
            'geometry' => $geo->shape
        ]);
    }
    die(); //die() is required to avoid displaying the entire drupal interface
  }
}


/**
 * Form used to configure the ndabio module.
 */
function ndabio_config_form($form, &$form_state) {
  $form['ndabio_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Naturalis Data API config')
  );
  $form['ndabio_config']['ndabio_config_gmapkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Google maps key'),
    '#default_value' => variable_get('ndabio_config_gmapkey', NDABIO_GMAPKEY),
    '#size' => 140,
    '#maxlength' => 200,
    '#description' => t('The key used by Google maps for a geographic search.') . '<br />' .
      t('Default') . ': ' . NDABIO_GMAPKEY,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 *
 */
function ndabio_displayform($arg1 = "") {
  drupal_add_js(drupal_get_path('module', 'ndabio') .'/js/form.js');

  if ($arg1 === "geo") variable_set("geosearch", "1");
  else variable_set("geosearch", "0");
  $form = drupal_get_form('ndabio_advanced_taxonomysearch');



  return (drupal_render($form));
}

/**
 *
 */
function _wrap_inner_grid_cols(&$form_element, $n = 6) {
  if (!isset($form_element['#prefix'])) $form_element['#prefix'] = '';
  if (!isset($form_element['#suffix'])) $form_element['#prefix'] = '';
  $form_element['#prefix'] = $form_element['#suffix'] . "<div class='small-$n columns'>";
  $form_element['#suffix'] = "</div>" . $form_element['#suffix'];
}

/**
 * Implements hook_theme().
 */
function ndabio_theme($existing, $type, $theme, $path) {
  //Provide a theme function for the 'omnisearch' field
  $data['ndabio_omnisearch'] = array(
    'render element' => 'element',
  );
  return $data;
}

/**
 * Check if a string is JSON.
 * @param string
 * @return boolean
 */
function isJson($string) {
  json_decode($string);
  return (json_last_error() == JSON_ERROR_NONE);
}




/**
 * DEFINE CUSTOM (BASIC) SEARCH
 */


/**
 * Implements hook_search_page().
 */
function ndabio_search_page($results) {
  //drupal_set_message("Naturalis: ndabio_search_page");

  $output['prefix']['#markup'] = '<h2>' . t('Search results') . '</h2>' ;
  $output['prefix']['#markup'] .= '<ol class="search-results">';

  if (!empty($results)) {
    foreach ($results as $entry) {
      $output[] = array(
        '#theme' => 'search_result',
        '#result' => $entry,
        '#module' => 'naturalis',
      );
    }
  }
  $output['suffix']['#markup'] = '</ol>' . theme('pager');

  return $output;
}

function _getExpandedFlag () {
    foreach ($_SESSION['nbaSearch'] as $k => $v) {
        // All true search parameters als formatted as x_etc
        if (isset($k[1]) && $k[1] == '_' && strpos($k, 'andOr') === false && $v != '') {
            return 1;
        }
    }
    return 0;
}

function _getStoredZoomLevel () {
    if (isset($_SESSION['nbaSearch']['zoomLevel']) && 
    	!empty($_SESSION['nbaSearch']['zoomLevel'])) {
        return $_SESSION['nbaSearch']['zoomLevel'];
    }
    return -1;
}

function _getStoredCategory () {
    if (isset($_SESSION['nbaSearch']['category']) && 
    	$_SESSION['nbaSearch']['category'] != '') {
        return $_SESSION['nbaSearch']['category'];
    }
    return -1;
}


function _getStoredGeoShape ($jsonEncoded = false) {
	if (isset($_SESSION['nbaSearch']['geoShape']) && 
		!empty($_SESSION['nbaSearch']['geoShape'])) {
        return $jsonEncoded ? json_encode($_SESSION['nbaSearch']['geoShape']) : 
        	$_SESSION['nbaSearch']['geoShape'];
    }
	if (isset($_SESSION['nbaSearch']['gid']) && !empty($_SESSION['nbaSearch']['gid']) &&
			$_SESSION['nbaSearch']['gid'] != -1) {
    	$client = _initBioPortalClient();
    	$shape = $client->getGeoJsonForGid(_setNbaGid($_SESSION['nbaSearch']['gid']));
    	_addDebugMessage('get geoShape for ' . _setNbaGid($_SESSION['nbaSearch']['gid']), 
    		'[getGeoJsonForGid method does not use QuerySpec]');
    	return $jsonEncoded ? json_encode($shape) : $shape;
    }
    return -1;
}

function _isGeoSearch () {
	return (isset($_SESSION['nbaSearch']['geoShape']) && 
			!empty($_SESSION['nbaSearch']['geoShape'])) || 
		(isset($_SESSION['nbaSearch']['gid']) && 
			!empty($_SESSION['nbaSearch']['gid']) && 
			$_SESSION['nbaSearch']['gid'] != -1); 
}

function _getStoredMapCenter () {
    if (isset($_SESSION['nbaSearch']['mapCenter'])) {
         return $_SESSION['nbaSearch']['mapCenter'];
    }
    return null;
}

function _getStoredLocation () {
    if (isset($_SESSION['nbaSearch']['location'])) {
         return $_SESSION['nbaSearch']['location'];
    }
    return null;
}

function _getStoredGid () {
    if (isset($_SESSION['nbaSearch']['gid']) && $_SESSION['nbaSearch']['gid'] != -1) {
         return $_SESSION['nbaSearch']['gid'];
    }
    return null;
}



/**
 * 'search' TAXONOMY TO ADVANCED SEARCH FORM
 */
function ndabio_advanced_taxonomysearch () {
	global $base_root, $base_path, $language;
	
	// Set default values for searchagain
	$expandedFlag = $storedGid = -1;
	$placeholder = t('e.g. species name or locality');
	
	$loadold = 0;
	if (!empty($_GET['searchagain'])) {
		if (intval($_GET['searchagain']) == 1) {
			$expandedFlag = _getExpandedFlag();
			$storedGid = isset($_SESSION['nbaSearch']['gid']) && !empty($_SESSION['nbaSearch']['gid']) ? $_SESSION['nbaSearch']['gid'] : -1;
			
			$loadold = 1;
		}
	}
	$geosearch = 0;
	
	if (variable_get('geosearch') == '1') {
		
		drupal_set_title(t("Geographic search"));
		$geosearch = 1;
		$path = drupal_get_path('module', 'ndabio');
		drupal_add_css($path . "/css/ndabio_style.css");
		drupal_add_js($path . "/js/map.js", array(
			'weight' => 1 
		));
		drupal_add_js($path . "/js/mapform.js", array(
			'weight' => 1 
		));
		drupal_add_js("var str_base_path = '$base_path';", 'inline');
		
		drupal_add_js('var language = "' . $language->language . '";', 'inline');
		drupal_add_js('var storedGid = "' . $storedGid . '";', 'inline');
		drupal_add_js('var storedGeoShape = ' . _getStoredGeoShape(true) . ';', 'inline');
		drupal_add_js('var storedZoomLevel = ' . _getStoredZoomLevel() . ';', 'inline');
		drupal_add_js('var storedMapCenter = "' . _getStoredMapCenter() . '";', 'inline');
		drupal_add_js('var storedCategory = ' . _getStoredCategory() . ';', 'inline');
		
		drupal_add_js($path . "/js/jquery.scrollTo.min.js", array(
			'weight' => 1 
		));
		drupal_add_js("https://maps.googleapis.com/maps/api/js?key=" . variable_get('ndabio_config_gmapkey', NDABIO_GMAPKEY) . "&libraries=drawing");
		drupal_add_js("jQuery(function() { google.maps.event.addDomListener(window, 'load', initialize); });", array(
			'type' => 'inline',
			'scope' => 'footer' 
		));
	}
	$searchtype = array(
		0 => t('And'),
		1 => t('Or') 
	);
	
	drupal_add_js('var placeholder = "' . $placeholder . '";', 'inline');
	drupal_add_js("var expandAdvanced = $expandedFlag;", 'inline');
	drupal_add_js("jQuery(function() { jQuery('#edit-term').focus(); });", array(
		'type' => 'inline',
		'scope' => 'footer' 
	));
	
	$machine_name = "search";
	$v = taxonomy_vocabulary_machine_name_load($machine_name);
	$terms = taxonomy_get_tree($v->vid, 0, 1, TRUE);
	
	$form = array();
	foreach ($terms as $item) {
		$name = $item->name;
		
		$label = $item->field_ndalabel['und'][0]['safe_value'];
		if (empty($label))
			$label = $item->description;
		
		$sysname = $item->name;
		if (!empty($item->field_ndasystem))
			$sysname = $item->field_ndasystem['und'][0]['safe_value'];
		
		$children = taxonomy_get_children($item->tid, $item->vid);
		if ($children) {
			$form[$sysname] = array(
				'#type' => 'fieldset',
				'#id' => "edit-$sysname",
				// '#attributes' => array( 'form_id' => 'ndabio_advanced_taxonomysearch'),
				'#collapsed' => ($loadold) ? FALSE : TRUE 
				// '#title' => $label,
			);
			
			$form[$sysname]['reset'] = array(
				'#type' => 'button',
				'#value' => 'Reset',
				'#nowrapper' => TRUE,
				'#attributes' => array(
					'onclick' => "clearForm();",
					'class' => array(
						"reset-button" 
					) 
				) 
			);
			
			foreach ($children as $child) {
				$childdescription = t($child->description);
				$childlabel = t($child->field_ndalabel['und'][0]['safe_value']);
				if (empty($childlabel))
					$childlabel = $child->description;
				
				$childsysname = $child->name;
				if (strpos($childsysname, " ") !== FALSE) {
					$temp = explode(" ", $childsysname);
					$fieldsetPrefix = drupal_strtolower(drupal_substr(end($temp), 0, 1));
				} else {
					$fieldsetPrefix = drupal_strtolower(drupal_substr($childsysname, 0, 1));
				}
				$childgeorelevance = 0;
				if (!empty($child->field_ndageorelevance))
					$childgeorelevance = $child->field_ndageorelevance['und'][0]['value'];
				if (!empty($child->field_ndasystem))
					$childsysname = $child->field_ndasystem['und'][0]['safe_value'];
				$subchildren = taxonomy_get_children($child->tid, $child->vid);
				if ($subchildren && ((!$geosearch) || ($geosearch && $childgeorelevance))) {
					$defaultvalue = 0;
					if (isset($_SESSION['nbaSearch'][$fieldsetPrefix . '_andOr']) && $loadold) {
						$defaultvalue = intval($_SESSION['nbaSearch'][$fieldsetPrefix . '_andOr']);
					}
					$form[$sysname][$childsysname] = array(
						'#type' => 'fieldset',
						'#title' => t($childlabel),
						$fieldsetPrefix . '_andOr' => array(
							'#type' => 'radios',
							'#title' => t('Combine search terms'),
							'#default_value' => $defaultvalue,
							'#options' => $searchtype,
							'#inline' => TRUE 
						) 
					);
					
					foreach ($subchildren as $subchild) {
						$subchilddescription = t($subchild->description);
						$subchildlabel = t($subchild->field_ndalabel['und'][0]['safe_value']);
						if (empty($subchildlabel))
							$subchildlabel = $subchild->description;
						
						$subchildsysname = $subchild->name;
						$subchildvalues = "";
						if (!empty($subchild->field_ndasystem))
							$subchildsysname = $subchild->field_ndasystem['und'][0]['safe_value'];
						if (!empty($subchild->field_ndavalues))
							$subchildvalues = $subchild->field_ndavalues['und'][0]['safe_value'];
						
						// Special category, hide or pulldown fields
						if (($subchild->name == "--more--") || ($subchild->name == "--hide--")) {
							// --more-- will be grouped in a new fieldset
							// --hide-- will be ignored (not added to the form)
							
							$category = taxonomy_get_children($subchild->tid, $subchild->vid);
							if ($category && ($subchild->name == "--more--")) {
								$form[$sysname][$childsysname][$subchildsysname][$subchild->name] = array(
									'#type' => 'fieldset',
									'#title' => t("More"),
									'#collapsible' => TRUE,
									'#collapsed' => TRUE,
									'#attributes' => array(
										'collapsed' => "true",
										'collapsible' => 'true',
										'class' => array(
											"collapsible",
											"collapsed",
											"form-wrapper" 
										) 
									) 
								);
								
								// put all children in group
								foreach ($category as $catitem) {
									
									// New way to create select: it should be present in advancedSelects().
									// Taxonomy value will still be needed to indicate if --all-- option should be printed!
									$morelabel = t($catitem->field_ndalabel['und'][0]['safe_value']);
									$moredescription = t($catitem->description);
									$help = _setHelpText($subchildsysname, $moredescription, $morelabel);
									
									if (isset(advancedSelects()[$catitem->name])) {
										$options = _setAdvancedSelect($catitem->name, $catitem->field_ndavalues['und'][0]['safe_value']);
										$form[$sysname][$childsysname][$subchildsysname][$subchild->name][$catitem->name] = array(
											'#type' => 'select',
											'#title' => _wrap_label($help, $morelabel),
											'#options' => $options,
											'#default_value' => (!empty($_SESSION['nbaSearch']["{$catitem->name}"]) && $loadold) ? 
												$_SESSION['nbaSearch']["{$catitem->name}"] : "",
											'#required' => FALSE,
											'#inline' => TRUE,
											'#attributes' => array(
												'data-help-text' => $help 
											) 
										);
									} 
									else {
										$form[$sysname][$childsysname][$subchildsysname][$subchild->name][$catitem->name] = array(
											'#type' => 'textfield',
											'#title' => _wrap_label($help, $morelabel),
											'#default_value' => (!empty($_SESSION['nbaSearch']["{$catitem->name}"]) && $loadold) ? 
												$_SESSION['nbaSearch']["{$catitem->name}"] : "",
											'#required' => FALSE,
											'#inline' => TRUE,
											'#attributes' => array(
												'data-clear' => "",
												'name' => $subchildsysname,
												'data-help-text' => $help 
											) 
										);
									}
								}
							}
						} else {
							// Default search fields
							$help = _setHelpText($subchildsysname, $subchilddescription, $subchildlabel);
							
							if (isset(advancedSelects()[$subchildsysname])) {
								$options = _setAdvancedSelect($subchildsysname, $subchildvalues);
								$form[$sysname][$childsysname][$subchildsysname] = array(
									'#type' => 'select',
									'#title' => _wrap_label($help, $subchildlabel),
									'#options' => $options,
									'#default_value' => (!empty($_SESSION['nbaSearch']["{$subchildsysname}"]) && $loadold) ? 
										$_SESSION['nbaSearch']["{$subchildsysname}"] : "",
									'#inline' => TRUE,
									'#attributes' => array(
										'data-clear' => "",
										'name' => $subchildsysname,
										'data-help-text' => $help 
									) 
								);
							} else {
								
								$form[$sysname][$childsysname][$subchildsysname] = array(
									'#type' => 'textfield',
									'#title' => _wrap_label($help, $subchildlabel),
									'#default_value' => (!empty($_SESSION['nbaSearch']["{$subchildsysname}"]) && $loadold) ? 
										$_SESSION['nbaSearch']["{$subchildsysname}"] : "",
									'#required' => FALSE,
									'#inline' => TRUE,
									'#attributes' => array(
										'data-clear' => "",
										'name' => $subchildsysname,
										'data-help-text' => $help 
									) 
								);
							}
						}
					}
				} else {
					// Default search fields
					$help = _setHelpText($subchildsysname, $subchilddescription, $subchildlabel);
					
					if (isset(advancedSelects()[$childsysname])) {
						$options = _setAdvancedSelect($childsysname, $child->field_ndavalues['und'][0]['safe_value']);
						$form[$sysname][$childsysname][$subchildsysname] = array(
							'#type' => 'select',
							'#title' => _wrap_label($help, $subchildlabel),
							'#options' => $options,
							'#default_value' => (!empty($_SESSION['nbaSearch']["{$subchildsysname}"]) && $loadold) ? 
								$_SESSION['nbaSearch']["{$subchildsysname}"] : "",
							'#inline' => TRUE,
							'#attributes' => array(
								'data-clear' => "",
								'name' => $subchildsysname,
								'data-help-text' => $help 
							) 
						);
					} else {
						$form[$sysname][$childsysname]['#type'] = array(
							'#type' => 'textfield',
							'#title' => _wrap_label($help, $subchildlabel),
							'#default_value' => (!empty($_SESSION['nbaSearch']["{$childsysname}"]) && $loadold) ? 
								$_SESSION['nbaSearch']["{$childsysname}"] : "",
							'#required' => FALSE,
							'#inline' => TRUE,
							'#attributes' => array(
								'data-clear' => "",
								'name' => $childsysname,
								'data-help-text' => $help 
							) 
						);
					}
				}
			}
		} else {
			// Omnisearch Box
			$form[$sysname]['omnisearch'] = array(
				'#type' => 'fieldset',
				'#theme' => 'ndabio_omnisearch',
				'#nowrapper' => TRUE,
				'#attributes' => array(
					'class' => array(
						'fieldset-omnisearch' 
					) 
				) 
			);
			
			$form[$sysname]['omnisearch']['term'] = array(
				'#type' => 'textfield',
				'#title' => t('Keywords'),
				'#default_value' => (isset($_SESSION['nbaSearch']['term']) && $loadold) ? 
					$_SESSION['nbaSearch']['term'] : "",
				'#required' => FALSE,
				'#title_display' => 'invisible',
				'#nowrapper' => TRUE,
				'#id' => "edit-term",
				'#attributes' => array(
					'name' => 'term',
					'placeholder' => $placeholder 
				),
				'#description' => t('Click arrow for advanced search') 
			);
			
			$form[$sysname]['omnisearch']['submit'] = array(
				'#type' => 'submit',
				'#value' => t('Search'),
				'#nowrapper' => TRUE,
				'#attributes' => array(
					'class' => array(
						'postfix' 
					) 
				),
				'#id' => 'edit-submit-top' 
			);
		}
	}
	
	if ($geosearch) {
		$links = "<div id='search-areas-types' class='small-12 medium-2 columns chained-select chained-select-level-1'>" . 
		"  <ul>" . 
		"    <li>" . 
		"      <a data-rel='ajax' href='" . $base_root . $base_path . 
				"new_areas/country?response_type=embed&language=" . $language->language . "'>" . t('Countries') . "</a>" . 
		"    </li>" . 
		"    <li>" . 
		"      <a data-rel='ajax' href='" . $base_root . $base_path . "new_areas/municipality?response_type=embed&language=" . $language->language . "'>" . t('Municipality') . 
		" (NL)</a>" . 
		"    </li>" . 
		"    <li>" . 
		"      <a data-rel='ajax' href='" . $base_root . $base_path . "new_areas/nature?response_type=embed&language=" . $language->language . "'>" . t('Nature') . " (NL)</a>" . 
		"    </li>" . 
		"  </ul>" . 
		"</div>";
		
		$list = "<div id='search-areas-list' class='small-12 medium-3 columns'>" . 
		"  <input id='search-areas-filter' placeholder='« " . t("type to find") . " »' />" . 
		"  <div id='search-areas-target'></div>" . 
		"</div>";
		
		$form['gmap'] = array(
			'#type' => 'gmap',
			'#map' => 'gmap',
			'#settings' => array(
				'zoom' => 1,
				'id' => 'gmapx',
				'behavior' => array(
					'geocode_leave_marker' => TRUE 
				) 
			),
			'#prefix' => '<div id=\'geographical-search\' class=\'small-12 medium-7 columns\'>',
			'#suffix' => '<div id=\'map-canvas\'></div></div>' . $links . $list 
		);
	}
	$form[$sysname]['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Search'),
		'#nowrapper' => TRUE,
		'#id' => 'edit-submit-bottom' 
	);
	global $language;
	$form['#action'] = url('result');
	$form['#method'] = 'get';
	
	return ($form);
}

function ndabio_omnisearch_form() {
  $form = array();
  $form['omnisearch'] = array(
    '#type' => 'fieldset',
    '#theme' => 'ndabio_omnisearch',
    '#nowrapper' => TRUE,
    '#attributes' => array( 'class' => array('fieldset-omnisearch'))
  );

  $form['omnisearch']['term'] = array(
    '#type' => 'textfield',
    '#title' => t('Keywords'),
    '#default_value' => (isset($_SESSION['nbaSearch']['term']) && $loadold) ? $_SESSION['nbaSearch']['term'] : "",
    '#required' => FALSE,
    '#title_display' => 'invisible',
    '#nowrapper' => TRUE,
    '#id' => "edit-term",
    '#attributes' => array(
    	'name' => 'term', 
    	'placeholder' => t('e.g. species name or locality')),
   );

  $form['omnisearch']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#nowrapper' => TRUE,
    '#attributes' => array( 'class' => array('postfix')),
    '#id' => 'edit-submit-top'
  );
  $form['#action'] = url('nba/result');

  return ($form);
}

function _wrap_label( $help, $caption ){
  global $language;
  return "<span class='search-explanation' title='$help'><a href='/" . $language->language . "/help?language=" . $language->language . "#advanced-search' target='_blank'>$caption</a></span>";
}

